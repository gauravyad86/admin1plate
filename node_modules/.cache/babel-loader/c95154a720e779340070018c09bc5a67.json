{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { createTransport } from '@sentry/core';\nimport { getNativeFetchImplementation } from './utils';\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(options, nativeFetch) {\n  if (nativeFetch === void 0) {\n    nativeFetch = getNativeFetchImplementation();\n  }\n  function makeRequest(request) {\n    var requestOptions = __assign({\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin'\n    }, options.requestOptions);\n    return nativeFetch(options.url, requestOptions).then(function (response) {\n      return response.text().then(function (body) {\n        return {\n          body: body,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After')\n          },\n          reason: response.statusText,\n          statusCode: response.status\n        };\n      });\n    });\n  }\n  return createTransport({\n    bufferSize: options.bufferSize\n  }, makeRequest);\n}","map":{"version":3,"names":["createTransport","getNativeFetchImplementation","makeNewFetchTransport","options","nativeFetch","makeRequest","request","requestOptions","__assign","body","method","referrerPolicy","url","then","response","text","headers","get","reason","statusText","statusCode","status","bufferSize"],"sources":["../../../../src/transports/new-fetch.ts"],"sourcesContent":["import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\n\nimport { FetchImpl, getNativeFetchImplementation } from './utils';\n\nexport interface FetchTransportOptions extends BaseTransportOptions {\n  requestOptions?: RequestInit;\n}\n\n/**\n * Creates a Transport that uses the Fetch API to send events to Sentry.\n */\nexport function makeNewFetchTransport(\n  options: FetchTransportOptions,\n  nativeFetch: FetchImpl = getNativeFetchImplementation(),\n): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      referrerPolicy: 'origin',\n      ...options.requestOptions,\n    };\n\n    return nativeFetch(options.url, requestOptions).then(response => {\n      return response.text().then(body => ({\n        body,\n        headers: {\n          'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n          'retry-after': response.headers.get('Retry-After'),\n        },\n        reason: response.statusText,\n        statusCode: response.status,\n      }));\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n"],"mappings":";AAAA,SAEEA,eAAe,QAIV,cAAc;AAErB,SAAoBC,4BAA4B,QAAQ,SAAS;AAMjE;;;AAGA,OAAM,SAAUC,qBAAqBA,CACnCC,OAA8B,EAC9BC,WAAuD;EAAvD,IAAAA,WAAA;IAAAA,WAAA,GAAyBH,4BAA4B,EAAE;EAAA;EAEvD,SAASI,WAAWA,CAACC,OAAyB;IAC5C,IAAMC,cAAc,GAAAC,QAAA;MAClBC,IAAI,EAAEH,OAAO,CAACG,IAAI;MAClBC,MAAM,EAAE,MAAM;MACdC,cAAc,EAAE;IAAQ,GACrBR,OAAO,CAACI,cAAc,CAC1B;IAED,OAAOH,WAAW,CAACD,OAAO,CAACS,GAAG,EAAEL,cAAc,CAAC,CAACM,IAAI,CAAC,UAAAC,QAAQ;MAC3D,OAAOA,QAAQ,CAACC,IAAI,EAAE,CAACF,IAAI,CAAC,UAAAJ,IAAI;QAAI,OAAC;UACnCA,IAAI,EAAAA,IAAA;UACJO,OAAO,EAAE;YACP,sBAAsB,EAAEF,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;YACpE,aAAa,EAAEH,QAAQ,CAACE,OAAO,CAACC,GAAG,CAAC,aAAa;WAClD;UACDC,MAAM,EAAEJ,QAAQ,CAACK,UAAU;UAC3BC,UAAU,EAAEN,QAAQ,CAACO;SACtB;MARmC,CAQlC,CAAC;IACL,CAAC,CAAC;EACJ;EAEA,OAAOrB,eAAe,CAAC;IAAEsB,UAAU,EAAEnB,OAAO,CAACmB;EAAU,CAAE,EAAEjB,WAAW,CAAC;AACzE"},"metadata":{},"sourceType":"module"}