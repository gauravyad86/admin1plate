{"ast":null,"code":"import { isRegExp, isString } from './is';\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str, max) {\n  if (max === void 0) {\n    max = 0;\n  }\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : str.substr(0, max) + \"...\";\n}\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line, colno) {\n  var newLine = line;\n  var lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n  var start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  var end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = \"'{snip} \" + newLine;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n  return newLine;\n}\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n  var output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (var i = 0; i < input.length; i++) {\n    var value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n  return output.join(delimiter);\n}\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value, pattern) {\n  if (!isString(value)) {\n    return false;\n  }\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString) {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}","map":{"version":3,"names":["isRegExp","isString","truncate","str","max","length","substr","snipLine","line","colno","newLine","lineLength","start","Math","end","min","slice","safeJoin","input","delimiter","Array","isArray","output","i","value","push","String","e","join","isMatchingPattern","pattern","test","indexOf","escapeStringForRegex","regexString","replace"],"sources":["../../src/string.ts"],"sourcesContent":["import { isRegExp, isString } from './is';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.substr(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function safeJoin(input: any[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      output.push(String(value));\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the value matches a regex or includes the string\n * @param value The string value to be checked against\n * @param pattern Either a regex or a string that must be contained in value\n */\nexport function isMatchingPattern(value: string, pattern: RegExp | string): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (typeof pattern === 'string') {\n    return value.indexOf(pattern) !== -1;\n  }\n  return false;\n}\n\n/**\n * Given a string, escape characters which have meaning in the regex grammar, such that the result is safe to feed to\n * `new RegExp()`.\n *\n * Based on https://github.com/sindresorhus/escape-string-regexp. Vendored to a) reduce the size by skipping the runtime\n * type-checking, and b) ensure it gets down-compiled for old versions of Node (the published package only supports Node\n * 12+).\n *\n * @param regexString The string to escape\n * @returns An version of the string with all special regex characters escaped\n */\nexport function escapeStringForRegex(regexString: string): string {\n  // escape the hyphen separately so we can also replace it with a unicode literal hyphen, to avoid the problems\n  // discussed in https://github.com/sindresorhus/escape-string-regexp/issues/20.\n  return regexString.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}