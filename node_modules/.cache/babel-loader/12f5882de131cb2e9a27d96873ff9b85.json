{"ast":null,"code":"/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\nimport { isBrowserBundle } from './env';\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv() {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return !isBrowserBundle() && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n}\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod, request) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule(moduleName) {\n  var mod;\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n  try {\n    var cwd = dynamicRequire(module, 'process').cwd;\n    mod = dynamicRequire(module, cwd() + \"/node_modules/\" + moduleName);\n  } catch (e) {\n    // no-empty\n  }\n  return mod;\n}","map":{"version":3,"names":["isBrowserBundle","isNodeEnv","Object","prototype","toString","call","process","dynamicRequire","mod","request","require","loadModule","moduleName","module","e","cwd"],"sources":["../../src/node.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\nimport { isBrowserBundle } from './env';\n\n/**\n * Checks whether we're in the Node.js or Browser environment\n *\n * @returns Answer to given question\n */\nexport function isNodeEnv(): boolean {\n  // explicitly check for browser bundles as those can be optimized statically\n  // by terser/rollup.\n  return (\n    !isBrowserBundle() &&\n    Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]'\n  );\n}\n\n/**\n * Requires a module which is protected against bundler minification.\n *\n * @param request The module path to resolve\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any\nexport function dynamicRequire(mod: any, request: string): any {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return mod.require(request);\n}\n\n/**\n * Helper for dynamically loading module that should work with linked dependencies.\n * The problem is that we _should_ be using `require(require.resolve(moduleName, { paths: [cwd()] }))`\n * However it's _not possible_ to do that with Webpack, as it has to know all the dependencies during\n * build time. `require.resolve` is also not available in any other way, so we cannot create,\n * a fake helper like we do with `dynamicRequire`.\n *\n * We always prefer to use local package, thus the value is not returned early from each `try/catch` block.\n * That is to mimic the behavior of `require.resolve` exactly.\n *\n * @param moduleName module name to require\n * @returns possibly required module\n */\nexport function loadModule<T>(moduleName: string): T | undefined {\n  let mod: T | undefined;\n\n  try {\n    mod = dynamicRequire(module, moduleName);\n  } catch (e) {\n    // no-empty\n  }\n\n  try {\n    const { cwd } = dynamicRequire(module, 'process');\n    mod = dynamicRequire(module, `${cwd()}/node_modules/${moduleName}`) as T;\n  } catch (e) {\n    // no-empty\n  }\n\n  return mod;\n}\n"],"mappings":"AAAA;;;;AAKA,SAASA,eAAe,QAAQ,OAAO;AAEvC;;;;;AAKA,OAAM,SAAUC,SAASA,CAAA;EACvB;EACA;EACA,OACE,CAACD,eAAe,EAAE,IAClBE,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAAC,OAAOC,OAAO,KAAK,WAAW,GAAGA,OAAO,GAAG,CAAC,CAAC,KAAK,kBAAkB;AAEvG;AAEA;;;;;AAKA;AACA,OAAM,SAAUC,cAAcA,CAACC,GAAQ,EAAEC,OAAe;EACtD;EACA,OAAOD,GAAG,CAACE,OAAO,CAACD,OAAO,CAAC;AAC7B;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUE,UAAUA,CAAIC,UAAkB;EAC9C,IAAIJ,GAAkB;EAEtB,IAAI;IACFA,GAAG,GAAGD,cAAc,CAACM,MAAM,EAAED,UAAU,CAAC;GACzC,CAAC,OAAOE,CAAC,EAAE;IACV;EAAA;EAGF,IAAI;IACM,IAAAC,GAAA,GAAAR,cAAA,CAAAM,MAAA,aAAAE,GAAG;IACXP,GAAG,GAAGD,cAAc,CAACM,MAAM,EAAKE,GAAG,EAAE,sBAAiBH,UAAY,CAAM;GACzE,CAAC,OAAOE,CAAC,EAAE;IACV;EAAA;EAGF,OAAON,GAAG;AACZ"},"metadata":{},"sourceType":"module"}