{"ast":null,"code":"/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\nimport { isNodeEnv } from './node';\nvar fallbackGlobalObject = {};\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject() {\n  return isNodeEnv() ? global : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n  ? window // eslint-disable-line no-restricted-globals\n  : typeof self !== 'undefined' ? self : fallbackGlobalObject;\n}\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton(name, creator, obj) {\n  var global = obj || getGlobalObject();\n  var __SENTRY__ = global.__SENTRY__ = global.__SENTRY__ || {};\n  var singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}","map":{"version":3,"names":["isNodeEnv","fallbackGlobalObject","getGlobalObject","global","window","self","getGlobalSingleton","name","creator","obj","__SENTRY__","singleton"],"sources":["../../src/global.ts"],"sourcesContent":["/**\n * NOTE: In order to avoid circular dependencies, if you add a function to this module and it needs to print something,\n * you must either a) use `console.log` rather than the logger, or b) put your function elsewhere.\n */\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Integration } from '@sentry/types';\n\nimport { isNodeEnv } from './node';\n\n/** Internal */\ninterface SentryGlobal {\n  Sentry?: {\n    Integrations?: Integration[];\n  };\n  SENTRY_ENVIRONMENT?: string;\n  SENTRY_DSN?: string;\n  SENTRY_RELEASE?: {\n    id?: string;\n  };\n  __SENTRY__: {\n    globalEventProcessors: any;\n    hub: any;\n    logger: any;\n  };\n}\n\nconst fallbackGlobalObject = {};\n\n/**\n * Safely get global scope object\n *\n * @returns Global scope object\n */\nexport function getGlobalObject<T>(): T & SentryGlobal {\n  return (\n    isNodeEnv()\n      ? global\n      : typeof window !== 'undefined' // eslint-disable-line no-restricted-globals\n      ? window // eslint-disable-line no-restricted-globals\n      : typeof self !== 'undefined'\n      ? self\n      : fallbackGlobalObject\n  ) as T & SentryGlobal;\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `getGlobalObject`'s return value\n * @returns the singleton\n */\nexport function getGlobalSingleton<T>(name: keyof SentryGlobal['__SENTRY__'], creator: () => T, obj?: unknown): T {\n  const global = (obj || getGlobalObject()) as SentryGlobal;\n  const __SENTRY__ = (global.__SENTRY__ = global.__SENTRY__ || {});\n  const singleton = __SENTRY__[name] || (__SENTRY__[name] = creator());\n  return singleton;\n}\n"],"mappings":"AAAA;;;;AASA,SAASA,SAAS,QAAQ,QAAQ;AAmBlC,IAAMC,oBAAoB,GAAG,EAAE;AAE/B;;;;;AAKA,OAAM,SAAUC,eAAeA,CAAA;EAC7B,OACEF,SAAS,EAAE,GACPG,MAAM,GACN,OAAOC,MAAM,KAAK,WAAW,CAAC;EAAA,EAC9BA,MAAM,CAAC;EAAA,EACP,OAAOC,IAAI,KAAK,WAAW,GAC3BA,IAAI,GACJJ,oBAAoB;AAE5B;AAEA;;;;;;;;;;;AAWA,OAAM,SAAUK,kBAAkBA,CAAIC,IAAsC,EAAEC,OAAgB,EAAEC,GAAa;EAC3G,IAAMN,MAAM,GAAIM,GAAG,IAAIP,eAAe,EAAmB;EACzD,IAAMQ,UAAU,GAAIP,MAAM,CAACO,UAAU,GAAGP,MAAM,CAACO,UAAU,IAAI,EAAG;EAChE,IAAMC,SAAS,GAAGD,UAAU,CAACH,IAAI,CAAC,KAAKG,UAAU,CAACH,IAAI,CAAC,GAAGC,OAAO,EAAE,CAAC;EACpE,OAAOG,SAAS;AAClB"},"metadata":{},"sourceType":"module"}