{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\nimport { getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api) {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  var _a = api.metadata.sdk,\n    name = _a.name,\n    version = _a.version;\n  return {\n    name: name,\n    version: version\n  };\n}\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = __spread(event.sdk.integrations || [], sdkInfo.integrations || []);\n  event.sdk.packages = __spread(event.sdk.packages || [], sdkInfo.packages || []);\n  return event;\n}\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(session, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var envelopeHeaders = __assign(__assign({\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  });\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  var type = 'aggregates' in session ? 'sessions' : 'session';\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  var envelopeItem = [{\n    type: type\n  }, session];\n  var envelope = createEnvelope(envelopeHeaders, [envelopeItem]);\n  return [envelope, type];\n}\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session, api) {\n  var _a = __read(createSessionEnvelope(session, api), 2),\n    envelope = _a[0],\n    type = _a[1];\n  return {\n    body: serializeEnvelope(envelope),\n    type: type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n  };\n}\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n  var _a = transactionSampling || {},\n    samplingMethod = _a.method,\n    sampleRate = _a.rate;\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n  var envelopeHeaders = __assign(__assign({\n    event_id: event.event_id,\n    sent_at: new Date().toISOString()\n  }, sdkInfo && {\n    sdk: sdkInfo\n  }), !!api.tunnel && {\n    dsn: dsnToString(api.dsn)\n  });\n  var eventItem = [{\n    type: eventType,\n    sample_rates: [{\n      id: samplingMethod,\n      rate: sampleRate\n    }]\n  }, event];\n  return createEnvelope(envelopeHeaders, [eventItem]);\n}\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event, api) {\n  var sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  var eventType = event.type || 'event';\n  var useEnvelope = eventType === 'transaction' || !!api.tunnel;\n  var transactionSampling = (event.sdkProcessingMetadata || {}).transactionSampling;\n  var _a = transactionSampling || {},\n    samplingMethod = _a.method,\n    sampleRate = _a.rate;\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n  var body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      var innerErr = newErr;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: {\n          message: innerErr.message,\n          stack: innerErr.stack\n        }\n      });\n    }\n  }\n  var req = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body: body,\n    type: eventType,\n    url: useEnvelope ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel) : getStoreEndpointWithUrlEncodedAuth(api.dsn)\n  };\n  // https://develop.sentry.dev/sdk/envelopes/\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    var envelopeHeaders = __assign(__assign({\n      event_id: event.event_id,\n      sent_at: new Date().toISOString()\n    }, sdkInfo && {\n      sdk: sdkInfo\n    }), !!api.tunnel && {\n      dsn: dsnToString(api.dsn)\n    });\n    var eventItem = [{\n      type: eventType,\n      sample_rates: [{\n        id: samplingMethod,\n        rate: sampleRate\n      }]\n    }, req.body];\n    var envelope = createEnvelope(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n  return req;\n}","map":{"version":3,"names":["createEnvelope","dsnToString","normalize","serializeEnvelope","getEnvelopeEndpointWithUrlEncodedAuth","getStoreEndpointWithUrlEncodedAuth","getSdkMetadataForEnvelopeHeader","api","metadata","sdk","_a","name","version","enhanceEventWithSdkInfo","event","sdkInfo","integrations","__spread","packages","createSessionEnvelope","session","envelopeHeaders","__assign","sent_at","Date","toISOString","tunnel","dsn","type","envelopeItem","envelope","sessionToSentryRequest","__read","body","url","createEventEnvelope","eventType","transactionSampling","sdkProcessingMetadata","samplingMethod","method","sampleRate","rate","tags","extra","baseClientNormalized","skippedNormalization","normalizeDepth","event_id","eventItem","sample_rates","id","eventToSentryRequest","useEnvelope","JSON","stringify","err","JSONStringifyError","newErr","innerErr","message","stack","req"],"sources":["../../src/request.ts"],"sourcesContent":["import {\n  Event,\n  EventEnvelope,\n  EventItem,\n  SdkInfo,\n  SentryRequest,\n  SentryRequestType,\n  Session,\n  SessionAggregates,\n  SessionEnvelope,\n  SessionItem,\n} from '@sentry/types';\nimport { createEnvelope, dsnToString, normalize, serializeEnvelope } from '@sentry/utils';\n\nimport { APIDetails, getEnvelopeEndpointWithUrlEncodedAuth, getStoreEndpointWithUrlEncodedAuth } from './api';\n\n/** Extract sdk info from from the API metadata */\nfunction getSdkMetadataForEnvelopeHeader(api: APIDetails): SdkInfo | undefined {\n  if (!api.metadata || !api.metadata.sdk) {\n    return;\n  }\n  const { name, version } = api.metadata.sdk;\n  return { name, version };\n}\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event: Event, sdkInfo?: SdkInfo): Event {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nexport function createSessionEnvelope(\n  session: Session | SessionAggregates,\n  api: APIDetails,\n): [SessionEnvelope, SentryRequestType] {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n\n  // I know this is hacky but we don't want to add `sessions` to request type since it's never rate limited\n  const type = 'aggregates' in session ? ('sessions' as SentryRequestType) : 'session';\n\n  // TODO (v7) Have to cast type because envelope items do not accept a `SentryRequestType`\n  const envelopeItem = [{ type } as { type: 'session' | 'sessions' }, session] as SessionItem;\n  const envelope = createEnvelope<SessionEnvelope>(envelopeHeaders, [envelopeItem]);\n\n  return [envelope, type];\n}\n\n/** Creates a SentryRequest from a Session. */\nexport function sessionToSentryRequest(session: Session | SessionAggregates, api: APIDetails): SentryRequest {\n  const [envelope, type] = createSessionEnvelope(session, api);\n  return {\n    body: serializeEnvelope(envelope),\n    type,\n    url: getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel),\n  };\n}\n\n/**\n * Create an Envelope from an event. Note that this is duplicated from below,\n * but on purpose as this will be refactored in v7.\n */\nexport function createEventEnvelope(event: Event, api: APIDetails): EventEnvelope {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  const envelopeHeaders = {\n    event_id: event.event_id as string,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n  };\n  const eventItem: EventItem = [\n    {\n      type: eventType,\n      sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n    },\n    event,\n  ];\n  return createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n}\n\n/** Creates a SentryRequest from an event. */\nexport function eventToSentryRequest(event: Event, api: APIDetails): SentryRequest {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(api);\n  const eventType = event.type || 'event';\n  const useEnvelope = eventType === 'transaction' || !!api.tunnel;\n\n  const { transactionSampling } = event.sdkProcessingMetadata || {};\n  const { method: samplingMethod, rate: sampleRate } = transactionSampling || {};\n\n  // TODO: Below is a temporary hack in order to debug a serialization error - see\n  // https://github.com/getsentry/sentry-javascript/issues/2809,\n  // https://github.com/getsentry/sentry-javascript/pull/4425, and\n  // https://github.com/getsentry/sentry-javascript/pull/4574.\n  //\n  // TL; DR: even though we normalize all events (which should prevent this), something is causing `JSON.stringify` to\n  // throw a circular reference error.\n  //\n  // When it's time to remove it:\n  // 1. Delete everything between here and where the request object `req` is created, EXCEPT the line deleting\n  //    `sdkProcessingMetadata`\n  // 2. Restore the original version of the request body, which is commented out\n  // 3. Search for either of the PR URLs above and pull out the companion hacks in the browser playwright tests and the\n  //    baseClient tests in this package\n  enhanceEventWithSdkInfo(event, api.metadata.sdk);\n  event.tags = event.tags || {};\n  event.extra = event.extra || {};\n\n  // In theory, all events should be marked as having gone through normalization and so\n  // we should never set this tag/extra data\n  if (!(event.sdkProcessingMetadata && event.sdkProcessingMetadata.baseClientNormalized)) {\n    event.tags.skippedNormalization = true;\n    event.extra.normalizeDepth = event.sdkProcessingMetadata ? event.sdkProcessingMetadata.normalizeDepth : 'unset';\n  }\n\n  // prevent this data from being sent to sentry\n  // TODO: This is NOT part of the hack - DO NOT DELETE\n  delete event.sdkProcessingMetadata;\n\n  let body;\n  try {\n    // 99.9% of events should get through just fine - no change in behavior for them\n    body = JSON.stringify(event);\n  } catch (err) {\n    // Record data about the error without replacing original event data, then force renormalization\n    event.tags.JSONStringifyError = true;\n    event.extra.JSONStringifyError = err;\n    try {\n      body = JSON.stringify(normalize(event));\n    } catch (newErr) {\n      // At this point even renormalization hasn't worked, meaning something about the event data has gone very wrong.\n      // Time to cut our losses and record only the new error. With luck, even in the problematic cases we're trying to\n      // debug with this hack, we won't ever land here.\n      const innerErr = newErr as Error;\n      body = JSON.stringify({\n        message: 'JSON.stringify error after renormalization',\n        // setting `extra: { innerErr }` here for some reason results in an empty object, so unpack manually\n        extra: { message: innerErr.message, stack: innerErr.stack },\n      });\n    }\n  }\n\n  const req: SentryRequest = {\n    // this is the relevant line of code before the hack was added, to make it easy to undo said hack once we've solved\n    // the mystery\n    // body: JSON.stringify(sdkInfo ? enhanceEventWithSdkInfo(event, api.metadata.sdk) : event),\n    body,\n    type: eventType,\n    url: useEnvelope\n      ? getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel)\n      : getStoreEndpointWithUrlEncodedAuth(api.dsn),\n  };\n\n  // https://develop.sentry.dev/sdk/envelopes/\n\n  // Since we don't need to manipulate envelopes nor store them, there is no\n  // exported concept of an Envelope with operations including serialization and\n  // deserialization. Instead, we only implement a minimal subset of the spec to\n  // serialize events inline here.\n  if (useEnvelope) {\n    const envelopeHeaders = {\n      event_id: event.event_id as string,\n      sent_at: new Date().toISOString(),\n      ...(sdkInfo && { sdk: sdkInfo }),\n      ...(!!api.tunnel && { dsn: dsnToString(api.dsn) }),\n    };\n    const eventItem: EventItem = [\n      {\n        type: eventType,\n        sample_rates: [{ id: samplingMethod, rate: sampleRate }],\n      },\n      req.body,\n    ];\n    const envelope = createEnvelope<EventEnvelope>(envelopeHeaders, [eventItem]);\n    req.body = serializeEnvelope(envelope);\n  }\n\n  return req;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}