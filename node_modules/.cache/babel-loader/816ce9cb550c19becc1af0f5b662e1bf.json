{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { BaseBackend, getEnvelopeEndpointWithUrlEncodedAuth, initAPIDetails } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, makeNewFetchTransport, makeNewXHRTransport, XHRTransport } from './transports';\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nvar BrowserBackend = /** @class */function (_super) {\n  __extends(BrowserBackend, _super);\n  function BrowserBackend() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromException = function (exception, hint) {\n    return eventFromException(exception, hint, this._options.attachStacktrace);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype.eventFromMessage = function (message, level, hint) {\n    if (level === void 0) {\n      level = Severity.Info;\n    }\n    return eventFromMessage(message, level, hint, this._options.attachStacktrace);\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserBackend.prototype._setupTransport = function () {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return _super.prototype._setupTransport.call(this);\n    }\n    var transportOptions = __assign(__assign({}, this._options.transportOptions), {\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata\n    });\n    var api = initAPIDetails(transportOptions.dsn, transportOptions._metadata, transportOptions.tunnel);\n    var url = getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      var requestOptions = __assign({}, transportOptions.fetchParameters);\n      this._newTransport = makeNewFetchTransport({\n        requestOptions: requestOptions,\n        url: url\n      });\n      return new FetchTransport(transportOptions);\n    }\n    this._newTransport = makeNewXHRTransport({\n      url: url,\n      headers: transportOptions.headers\n    });\n    return new XHRTransport(transportOptions);\n  };\n  return BrowserBackend;\n}(BaseBackend);\nexport { BrowserBackend };","map":{"version":3,"names":["BaseBackend","getEnvelopeEndpointWithUrlEncodedAuth","initAPIDetails","Severity","supportsFetch","eventFromException","eventFromMessage","FetchTransport","makeNewFetchTransport","makeNewXHRTransport","XHRTransport","BrowserBackend","_super","__extends","prototype","exception","hint","_options","attachStacktrace","message","level","Info","_setupTransport","dsn","call","transportOptions","__assign","tunnel","sendClientReports","_metadata","api","url","transport","requestOptions","fetchParameters","_newTransport","headers"],"sources":["../../../src/backend.ts"],"sourcesContent":["import { BaseBackend, getEnvelopeEndpointWithUrlEncodedAuth, initAPIDetails } from '@sentry/core';\nimport { Event, EventHint, Options, Severity, Transport, TransportOptions } from '@sentry/types';\nimport { supportsFetch } from '@sentry/utils';\n\nimport { eventFromException, eventFromMessage } from './eventbuilder';\nimport { FetchTransport, makeNewFetchTransport, makeNewXHRTransport, XHRTransport } from './transports';\n\n/**\n * Configuration options for the Sentry Browser SDK.\n * @see BrowserClient for more information.\n */\nexport interface BrowserOptions extends Options {\n  /**\n   * A pattern for error URLs which should exclusively be sent to Sentry.\n   * This is the opposite of {@link Options.denyUrls}.\n   * By default, all errors will be sent.\n   */\n  allowUrls?: Array<string | RegExp>;\n\n  /**\n   * A pattern for error URLs which should not be sent to Sentry.\n   * To allow certain errors instead, use {@link Options.allowUrls}.\n   * By default, all errors will be sent.\n   */\n  denyUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.allowUrls} instead. */\n  whitelistUrls?: Array<string | RegExp>;\n\n  /** @deprecated use {@link Options.denyUrls} instead. */\n  blacklistUrls?: Array<string | RegExp>;\n}\n\n/**\n * The Sentry Browser SDK Backend.\n * @hidden\n */\nexport class BrowserBackend extends BaseBackend<BrowserOptions> {\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    return eventFromException(exception, hint, this._options.attachStacktrace);\n  }\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(message: string, level: Severity = Severity.Info, hint?: EventHint): PromiseLike<Event> {\n    return eventFromMessage(message, level, hint, this._options.attachStacktrace);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return super._setupTransport();\n    }\n\n    const transportOptions: TransportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn,\n      tunnel: this._options.tunnel,\n      sendClientReports: this._options.sendClientReports,\n      _metadata: this._options._metadata,\n    };\n\n    const api = initAPIDetails(transportOptions.dsn, transportOptions._metadata, transportOptions.tunnel);\n    const url = getEnvelopeEndpointWithUrlEncodedAuth(api.dsn, api.tunnel);\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n    if (supportsFetch()) {\n      const requestOptions: RequestInit = { ...transportOptions.fetchParameters };\n      this._newTransport = makeNewFetchTransport({ requestOptions, url });\n      return new FetchTransport(transportOptions);\n    }\n\n    this._newTransport = makeNewXHRTransport({\n      url,\n      headers: transportOptions.headers,\n    });\n    return new XHRTransport(transportOptions);\n  }\n}\n"],"mappings":";AAAA,SAASA,WAAW,EAAEC,qCAAqC,EAAEC,cAAc,QAAQ,cAAc;AACjG,SAAoCC,QAAQ,QAAqC,eAAe;AAChG,SAASC,aAAa,QAAQ,eAAe;AAE7C,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,gBAAgB;AACrE,SAASC,cAAc,EAAEC,qBAAqB,EAAEC,mBAAmB,EAAEC,YAAY,QAAQ,cAAc;AA4BvG;;;;AAIA,IAAAC,cAAA,0BAAAC,MAAA;EAAoCC,SAAA,CAAAF,cAAA,EAAAC,MAAA;EAApC,SAAAD,eAAA;;EAiDA;EAhDE;;;EAGOA,cAAA,CAAAG,SAAA,CAAAT,kBAAkB,GAAzB,UAA0BU,SAAkB,EAAEC,IAAgB;IAC5D,OAAOX,kBAAkB,CAACU,SAAS,EAAEC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAAC;EAC5E,CAAC;EACD;;;EAGOP,cAAA,CAAAG,SAAA,CAAAR,gBAAgB,GAAvB,UAAwBa,OAAe,EAAEC,KAA+B,EAAEJ,IAAgB;IAAjD,IAAAI,KAAA;MAAAA,KAAA,GAAkBjB,QAAQ,CAACkB,IAAI;IAAA;IACtE,OAAOf,gBAAgB,CAACa,OAAO,EAAEC,KAAK,EAAEJ,IAAI,EAAE,IAAI,CAACC,QAAQ,CAACC,gBAAgB,CAAC;EAC/E,CAAC;EAED;;;EAGUP,cAAA,CAAAG,SAAA,CAAAQ,eAAe,GAAzB;IACE,IAAI,CAAC,IAAI,CAACL,QAAQ,CAACM,GAAG,EAAE;MACtB;MACA,OAAOX,MAAA,CAAAE,SAAA,CAAMQ,eAAe,CAAAE,IAAA,MAAE;;IAGhC,IAAMC,gBAAgB,GAAAC,QAAA,CAAAA,QAAA,KACjB,IAAI,CAACT,QAAQ,CAACQ,gBAAgB;MACjCF,GAAG,EAAE,IAAI,CAACN,QAAQ,CAACM,GAAG;MACtBI,MAAM,EAAE,IAAI,CAACV,QAAQ,CAACU,MAAM;MAC5BC,iBAAiB,EAAE,IAAI,CAACX,QAAQ,CAACW,iBAAiB;MAClDC,SAAS,EAAE,IAAI,CAACZ,QAAQ,CAACY;IAAS,EACnC;IAED,IAAMC,GAAG,GAAG5B,cAAc,CAACuB,gBAAgB,CAACF,GAAG,EAAEE,gBAAgB,CAACI,SAAS,EAAEJ,gBAAgB,CAACE,MAAM,CAAC;IACrG,IAAMI,GAAG,GAAG9B,qCAAqC,CAAC6B,GAAG,CAACP,GAAG,EAAEO,GAAG,CAACH,MAAM,CAAC;IAEtE,IAAI,IAAI,CAACV,QAAQ,CAACe,SAAS,EAAE;MAC3B,OAAO,IAAI,IAAI,CAACf,QAAQ,CAACe,SAAS,CAACP,gBAAgB,CAAC;;IAEtD,IAAIrB,aAAa,EAAE,EAAE;MACnB,IAAM6B,cAAc,GAAAP,QAAA,KAAqBD,gBAAgB,CAACS,eAAe,CAAE;MAC3E,IAAI,CAACC,aAAa,GAAG3B,qBAAqB,CAAC;QAAEyB,cAAc,EAAAA,cAAA;QAAEF,GAAG,EAAAA;MAAA,CAAE,CAAC;MACnE,OAAO,IAAIxB,cAAc,CAACkB,gBAAgB,CAAC;;IAG7C,IAAI,CAACU,aAAa,GAAG1B,mBAAmB,CAAC;MACvCsB,GAAG,EAAAA,GAAA;MACHK,OAAO,EAAEX,gBAAgB,CAACW;KAC3B,CAAC;IACF,OAAO,IAAI1B,YAAY,CAACe,gBAAgB,CAAC;EAC3C,CAAC;EACH,OAAAd,cAAC;AAAD,CAAC,CAjDmCX,WAAW"},"metadata":{},"sourceType":"module"}