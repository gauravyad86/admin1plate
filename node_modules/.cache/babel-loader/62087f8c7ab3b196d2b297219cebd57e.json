{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getGlobalObject, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\nimport { instrumentRoutingWithDefaults } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nvar BrowserTracing = /** @class */function () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    /** Store configured idle timeout so that it can be added as a tag to transactions */\n    this._configuredIdleTimeout = undefined;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        IS_DEBUG_BUILD && (this._emitOptionsWarning = true);\n      }\n    }\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n    var _metricOptions = this.options._metricOptions;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n    this._getCurrentHub = getCurrentHub;\n    if (this._emitOptionsWarning) {\n      IS_DEBUG_BUILD && logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      IS_DEBUG_BUILD && logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      instrumentRouting = _a.routingInstrumentation,\n      startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n      startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n      markBackgroundTransactions = _a.markBackgroundTransactions,\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    instrumentRouting(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n    instrumentOutgoingRequests({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n    if (!this._getCurrentHub) {\n      IS_DEBUG_BUILD && logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      beforeNavigate = _a.beforeNavigate,\n      idleTimeout = _a.idleTimeout,\n      maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n    if (finalContext.sampled === false) {\n      IS_DEBUG_BUILD && logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n    var hub = this._getCurrentHub();\n    var location = getGlobalObject().location;\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true, {\n      location: location\n    });\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n  return undefined;\n}\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName) {\n  var el = getGlobalObject().document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":{"version":3,"names":["getGlobalObject","logger","IS_DEBUG_BUILD","startIdleTransaction","DEFAULT_IDLE_TIMEOUT","extractTraceparentData","secToMs","registerBackgroundTabDetection","MetricsInstrumentation","defaultRequestInstrumentationOptions","instrumentOutgoingRequests","instrumentRoutingWithDefaults","DEFAULT_MAX_TRANSACTION_DURATION_SECONDS","DEFAULT_BROWSER_TRACING_OPTIONS","__assign","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","startTransactionOnLocationChange","startTransactionOnPageLoad","BrowserTracing","_options","name","id","_configuredIdleTimeout","undefined","tracingOrigins","Array","isArray","length","_emitOptionsWarning","options","_metricOptions","_metrics","_reportAllChanges","prototype","setupOnce","_","getCurrentHub","_this","_getCurrentHub","warn","_a","instrumentRouting","traceFetch","traceXHR","shouldCreateSpanForRequest","context","_createRouteTransaction","op","beforeNavigate","parentContextFromHeader","getHeaderContext","expandedContext","trimEnd","modifiedContext","finalContext","sampled","log","hub","location","idleTransaction","registerBeforeFinishCallback","transaction","endTimestamp","addPerformanceEntries","adjustTransactionDuration","setTag","header","getMetaContent","metaName","el","document","querySelector","getAttribute","maxDuration","diff","startTimestamp","isOutdatedTransaction","setStatus"],"sources":["../../../../src/browser/browsertracing.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  instrumentOutgoingRequests,\n  RequestInstrumentationOptions,\n} from './request';\nimport { instrumentRoutingWithDefaults } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * _metricOptions allows the user to send options to change how metrics are collected.\n   *\n   * _metricOptions is currently experimental.\n   *\n   * Default: undefined\n   */\n  _metricOptions?: Partial<{ _reportAllChanges: boolean }>;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    customStartTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: instrumentRoutingWithDefaults,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation;\n\n  private readonly _emitOptionsWarning?: boolean;\n\n  /** Store configured idle timeout so that it can be added as a tag to transactions */\n  private _configuredIdleTimeout: BrowserTracingOptions['idleTimeout'] | undefined = undefined;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options) {\n      this._configuredIdleTimeout = _options.idleTimeout;\n      if (_options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n        tracingOrigins = _options.tracingOrigins;\n      } else {\n        IS_DEBUG_BUILD && (this._emitOptionsWarning = true);\n      }\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n\n    const { _metricOptions } = this.options;\n    this._metrics = new MetricsInstrumentation(_metricOptions && _metricOptions._reportAllChanges);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n        );\n      IS_DEBUG_BUILD &&\n        logger.warn(\n          `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n        );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation: instrumentRouting,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    instrumentRouting(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    instrumentOutgoingRequests({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      IS_DEBUG_BUILD &&\n        logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      IS_DEBUG_BUILD && logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n\n    const hub = this._getCurrentHub();\n    const { location } = getGlobalObject() as WindowOrWorkerGlobalScope & { location: Location };\n\n    const idleTransaction = startIdleTransaction(\n      hub,\n      finalContext,\n      idleTimeout,\n      true,\n      { location }, // for use in the tracesSampler\n    );\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    idleTransaction.setTag('idleTimeout', this._configuredIdleTimeout);\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = getGlobalObject<Window>().document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus('deadline_exceeded');\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}