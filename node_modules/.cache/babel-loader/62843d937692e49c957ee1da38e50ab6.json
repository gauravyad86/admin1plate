{"ast":null,"code":"import { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nvar global = getGlobalObject();\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults(customStartTransaction, startTransactionOnPageLoad, startTransactionOnLocationChange) {\n  if (startTransactionOnPageLoad === void 0) {\n    startTransactionOnPageLoad = true;\n  }\n  if (startTransactionOnLocationChange === void 0) {\n    startTransactionOnLocationChange = true;\n  }\n  if (!global || !global.location) {\n    IS_DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n  var startingUrl = global.location.href;\n  var activeTransaction;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({\n      name: global.location.pathname,\n      op: 'pageload'\n    });\n  }\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', function (_a) {\n      var to = _a.to,\n        from = _a.from;\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          IS_DEBUG_BUILD && logger.log(\"[Tracing] Finishing current transaction with op: \" + activeTransaction.op);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({\n          name: global.location.pathname,\n          op: 'navigation'\n        });\n      }\n    });\n  }\n}","map":{"version":3,"names":["addInstrumentationHandler","getGlobalObject","logger","IS_DEBUG_BUILD","global","instrumentRoutingWithDefaults","customStartTransaction","startTransactionOnPageLoad","startTransactionOnLocationChange","location","warn","startingUrl","href","activeTransaction","name","pathname","op","_a","to","from","undefined","indexOf","log","finish"],"sources":["../../../../src/browser/router.ts"],"sourcesContent":["import { Transaction, TransactionContext } from '@sentry/types';\nimport { addInstrumentationHandler, getGlobalObject, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\nconst global = getGlobalObject<Window>();\n\n/**\n * Default function implementing pageload and navigation transactions\n */\nexport function instrumentRoutingWithDefaults<T extends Transaction>(\n  customStartTransaction: (context: TransactionContext) => T | undefined,\n  startTransactionOnPageLoad: boolean = true,\n  startTransactionOnLocationChange: boolean = true,\n): void {\n  if (!global || !global.location) {\n    IS_DEBUG_BUILD && logger.warn('Could not initialize routing instrumentation due to invalid location');\n    return;\n  }\n\n  let startingUrl: string | undefined = global.location.href;\n\n  let activeTransaction: T | undefined;\n  if (startTransactionOnPageLoad) {\n    activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'pageload' });\n  }\n\n  if (startTransactionOnLocationChange) {\n    addInstrumentationHandler('history', ({ to, from }: { to: string; from?: string }) => {\n      /**\n       * This early return is there to account for some cases where a navigation transaction starts right after\n       * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n       * create an uneccessary navigation transaction.\n       *\n       * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n       * only be caused in certain development environments where the usage of a hot module reloader is causing\n       * errors.\n       */\n      if (from === undefined && startingUrl && startingUrl.indexOf(to) !== -1) {\n        startingUrl = undefined;\n        return;\n      }\n\n      if (from !== to) {\n        startingUrl = undefined;\n        if (activeTransaction) {\n          IS_DEBUG_BUILD && logger.log(`[Tracing] Finishing current transaction with op: ${activeTransaction.op}`);\n          // If there's an open transaction on the scope, we need to finish it before creating an new one.\n          activeTransaction.finish();\n        }\n        activeTransaction = customStartTransaction({ name: global.location.pathname, op: 'navigation' });\n      }\n    });\n  }\n}\n"],"mappings":"AACA,SAASA,yBAAyB,EAAEC,eAAe,EAAEC,MAAM,QAAQ,eAAe;AAElF,SAASC,cAAc,QAAQ,UAAU;AAEzC,IAAMC,MAAM,GAAGH,eAAe,EAAU;AAExC;;;AAGA,OAAM,SAAUI,6BAA6BA,CAC3CC,sBAAsE,EACtEC,0BAA0C,EAC1CC,gCAAgD;EADhD,IAAAD,0BAAA;IAAAA,0BAAA,OAA0C;EAAA;EAC1C,IAAAC,gCAAA;IAAAA,gCAAA,OAAgD;EAAA;EAEhD,IAAI,CAACJ,MAAM,IAAI,CAACA,MAAM,CAACK,QAAQ,EAAE;IAC/BN,cAAc,IAAID,MAAM,CAACQ,IAAI,CAAC,sEAAsE,CAAC;IACrG;;EAGF,IAAIC,WAAW,GAAuBP,MAAM,CAACK,QAAQ,CAACG,IAAI;EAE1D,IAAIC,iBAAgC;EACpC,IAAIN,0BAA0B,EAAE;IAC9BM,iBAAiB,GAAGP,sBAAsB,CAAC;MAAEQ,IAAI,EAAEV,MAAM,CAACK,QAAQ,CAACM,QAAQ;MAAEC,EAAE,EAAE;IAAU,CAAE,CAAC;;EAGhG,IAAIR,gCAAgC,EAAE;IACpCR,yBAAyB,CAAC,SAAS,EAAE,UAACiB,EAA2C;UAAzCC,EAAA,GAAAD,EAAA,CAAAC,EAAE;QAAEC,IAAA,GAAAF,EAAA,CAAAE,IAAI;MAC9C;;;;;;;;;MASA,IAAIA,IAAI,KAAKC,SAAS,IAAIT,WAAW,IAAIA,WAAW,CAACU,OAAO,CAACH,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QACvEP,WAAW,GAAGS,SAAS;QACvB;;MAGF,IAAID,IAAI,KAAKD,EAAE,EAAE;QACfP,WAAW,GAAGS,SAAS;QACvB,IAAIP,iBAAiB,EAAE;UACrBV,cAAc,IAAID,MAAM,CAACoB,GAAG,CAAC,sDAAoDT,iBAAiB,CAACG,EAAI,CAAC;UACxG;UACAH,iBAAiB,CAACU,MAAM,EAAE;;QAE5BV,iBAAiB,GAAGP,sBAAsB,CAAC;UAAEQ,IAAI,EAAEV,MAAM,CAACK,QAAQ,CAACM,QAAQ;UAAEC,EAAE,EAAE;QAAY,CAAE,CAAC;;IAEpG,CAAC,CAAC;;AAEN"},"metadata":{},"sourceType":"module"}