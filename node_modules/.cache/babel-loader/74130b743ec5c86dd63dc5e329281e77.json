{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { isPrimitive } from './is';\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope(headers, items) {\n  if (items === void 0) {\n    items = [];\n  }\n  return [headers, items];\n}\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope(envelope, newItem) {\n  var _a = __read(envelope, 2),\n    headers = _a[0],\n    items = _a[1];\n  return [headers, __spread(items, [newItem])];\n}\n/**\n * Get the type of the envelope. Grabs the type from the first envelope item.\n */\nexport function getEnvelopeType(envelope) {\n  var _a = __read(envelope, 2),\n    _b = __read(_a[1], 1),\n    _c = __read(_b[0], 1),\n    firstItemHeader = _c[0];\n  return firstItemHeader.type;\n}\n/**\n * Serializes an envelope into a string.\n */\nexport function serializeEnvelope(envelope) {\n  var _a = __read(envelope, 2),\n    headers = _a[0],\n    items = _a[1];\n  var serializedHeaders = JSON.stringify(headers);\n  // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return items.reduce(function (acc, item) {\n    var _a = __read(item, 2),\n      itemHeaders = _a[0],\n      payload = _a[1];\n    // We do not serialize payloads that are primitives\n    var serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return acc + \"\\n\" + JSON.stringify(itemHeaders) + \"\\n\" + serializedPayload;\n  }, serializedHeaders);\n}","map":{"version":3,"names":["isPrimitive","createEnvelope","headers","items","addItemToEnvelope","envelope","newItem","_a","__read","__spread","getEnvelopeType","_b","_c","firstItemHeader","type","serializeEnvelope","serializedHeaders","JSON","stringify","reduce","acc","item","itemHeaders","payload","serializedPayload","String"],"sources":["../../src/envelope.ts"],"sourcesContent":["import { Envelope } from '@sentry/types';\n\nimport { isPrimitive } from './is';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function createEnvelope<E extends Envelope>(headers: E[0], items: E[1] = []): E {\n  return [headers, items] as E;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nexport function addItemToEnvelope<E extends Envelope>(envelope: E, newItem: E[1][number]): E {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] as E;\n}\n\n/**\n * Get the type of the envelope. Grabs the type from the first envelope item.\n */\nexport function getEnvelopeType<E extends Envelope>(envelope: E): string {\n  const [, [[firstItemHeader]]] = envelope;\n  return firstItemHeader.type;\n}\n\n/**\n * Serializes an envelope into a string.\n */\nexport function serializeEnvelope(envelope: Envelope): string {\n  const [headers, items] = envelope;\n  const serializedHeaders = JSON.stringify(headers);\n\n  // Have to cast items to any here since Envelope is a union type\n  // Fixed in Typescript 4.2\n  // TODO: Remove any[] cast when we upgrade to TS 4.2\n  // https://github.com/microsoft/TypeScript/issues/36390\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (items as any[]).reduce((acc, item: typeof items[number]) => {\n    const [itemHeaders, payload] = item;\n    // We do not serialize payloads that are primitives\n    const serializedPayload = isPrimitive(payload) ? String(payload) : JSON.stringify(payload);\n    return `${acc}\\n${JSON.stringify(itemHeaders)}\\n${serializedPayload}`;\n  }, serializedHeaders);\n}\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,MAAM;AAElC;;;;;AAKA,OAAM,SAAUC,cAAcA,CAAqBC,OAAa,EAAEC,KAAgB;EAAhB,IAAAA,KAAA;IAAAA,KAAA,KAAgB;EAAA;EAChF,OAAO,CAACD,OAAO,EAAEC,KAAK,CAAM;AAC9B;AAEA;;;;;AAKA,OAAM,SAAUC,iBAAiBA,CAAqBC,QAAW,EAAEC,OAAqB;EAChF,IAAAC,EAAA,GAAAC,MAAA,CAAAH,QAAA,IAA2B;IAA1BH,OAAA,GAAAK,EAAA,GAAO;IAAEJ,KAAA,GAAAI,EAAA,GAAiB;EACjC,OAAO,CAACL,OAAO,EAAAO,QAAA,CAAMN,KAAK,GAAEG,OAAO,GAAO;AAC5C;AAEA;;;AAGA,OAAM,SAAUI,eAAeA,CAAqBL,QAAW;EACvD,IAAAE,EAAA,GAAAC,MAAA,CAAAH,QAAA,IAAkC;IAA/BM,EAAA,GAAAH,MAAA,CAAAD,EAAA,OAAmB;IAAlBK,EAAA,GAAAJ,MAAA,CAAAG,EAAA,OAAiB;IAAhBE,eAAA,GAAAD,EAAA,GAA6B;EACxC,OAAOC,eAAe,CAACC,IAAI;AAC7B;AAEA;;;AAGA,OAAM,SAAUC,iBAAiBA,CAACV,QAAkB;EAC5C,IAAAE,EAAA,GAAAC,MAAA,CAAAH,QAAA,IAA2B;IAA1BH,OAAA,GAAAK,EAAA,GAAO;IAAEJ,KAAA,GAAAI,EAAA,GAAiB;EACjC,IAAMS,iBAAiB,GAAGC,IAAI,CAACC,SAAS,CAAChB,OAAO,CAAC;EAEjD;EACA;EACA;EACA;EACA;EACA,OAAQC,KAAe,CAACgB,MAAM,CAAC,UAACC,GAAG,EAAEC,IAA0B;IACvD,IAAAd,EAAA,GAAAC,MAAA,CAAAa,IAAA,IAA6B;MAA5BC,WAAA,GAAAf,EAAA,GAAW;MAAEgB,OAAA,GAAAhB,EAAA,GAAe;IACnC;IACA,IAAMiB,iBAAiB,GAAGxB,WAAW,CAACuB,OAAO,CAAC,GAAGE,MAAM,CAACF,OAAO,CAAC,GAAGN,IAAI,CAACC,SAAS,CAACK,OAAO,CAAC;IAC1F,OAAUH,GAAG,UAAKH,IAAI,CAACC,SAAS,CAACI,WAAW,CAAC,UAAKE,iBAAmB;EACvE,CAAC,EAAER,iBAAiB,CAAC;AACvB"},"metadata":{},"sourceType":"module"}