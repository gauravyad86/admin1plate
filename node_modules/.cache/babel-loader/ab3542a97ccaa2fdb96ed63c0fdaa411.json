{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { getCurrentHub, Hub } from '@sentry/hub';\nimport { dropUndefinedKeys, isInstanceOf, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Span as SpanClass, SpanRecorder } from './span';\n/** JSDoc */\nvar Transaction = /** @class */function (_super) {\n  __extends(Transaction, _super);\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Transaction(transactionContext, hub) {\n    var _this = _super.call(this, transactionContext) || this;\n    _this._measurements = {};\n    /**\n     * The reference to the current hub.\n     */\n    _this._hub = getCurrentHub();\n    if (isInstanceOf(hub, Hub)) {\n      _this._hub = hub;\n    }\n    _this.name = transactionContext.name || '';\n    _this.metadata = transactionContext.metadata || {};\n    _this._trimEnd = transactionContext.trimEnd;\n    // this is because transactions are also spans, and spans have a transaction pointer\n    _this.transaction = _this;\n    return _this;\n  }\n  /**\n   * JSDoc\n   */\n  Transaction.prototype.setName = function (name) {\n    this.name = name;\n  };\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  Transaction.prototype.initSpanRecorder = function (maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  };\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n  Transaction.prototype.setMeasurements = function (measurements) {\n    this._measurements = __assign({}, measurements);\n  };\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n  Transaction.prototype.setMetadata = function (newMetadata) {\n    this.metadata = __assign(__assign({}, this.metadata), newMetadata);\n  };\n  /**\n   * @inheritDoc\n   */\n  Transaction.prototype.finish = function (endTimestamp) {\n    var _this = this;\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n    if (!this.name) {\n      IS_DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n    // just sets the end timestamp\n    _super.prototype.finish.call(this, endTimestamp);\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      IS_DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n      var client = this._hub.getClient();\n      var transport = client && client.getTransport && client.getTransport();\n      if (transport && transport.recordLostEvent) {\n        transport.recordLostEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n    var finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(function (s) {\n      return s !== _this && s.endTimestamp;\n    }) : [];\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce(function (prev, current) {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n    var transaction = {\n      contexts: {\n        trace: this.getTraceContext()\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: this.metadata\n    };\n    var hasMeasurements = Object.keys(this._measurements).length > 0;\n    if (hasMeasurements) {\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding measurements to transaction', JSON.stringify(this._measurements, undefined, 2));\n      transaction.measurements = this._measurements;\n    }\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Finishing \" + this.op + \" transaction: \" + this.name + \".\");\n    return this._hub.captureEvent(transaction);\n  };\n  /**\n   * @inheritDoc\n   */\n  Transaction.prototype.toContext = function () {\n    var spanContext = _super.prototype.toContext.call(this);\n    return dropUndefinedKeys(__assign(__assign({}, spanContext), {\n      name: this.name,\n      trimEnd: this._trimEnd\n    }));\n  };\n  /**\n   * @inheritDoc\n   */\n  Transaction.prototype.updateWithContext = function (transactionContext) {\n    var _a;\n    _super.prototype.updateWithContext.call(this, transactionContext);\n    this.name = (_a = transactionContext.name, _a !== null && _a !== void 0 ? _a : '');\n    this._trimEnd = transactionContext.trimEnd;\n    return this;\n  };\n  return Transaction;\n}(SpanClass);\nexport { Transaction };","map":{"version":3,"names":["getCurrentHub","Hub","dropUndefinedKeys","isInstanceOf","logger","IS_DEBUG_BUILD","Span","SpanClass","SpanRecorder","Transaction","_super","__extends","transactionContext","hub","_this","call","_measurements","_hub","name","metadata","_trimEnd","trimEnd","transaction","prototype","setName","initSpanRecorder","maxlen","spanRecorder","add","setMeasurements","measurements","__assign","setMetadata","newMetadata","finish","endTimestamp","undefined","warn","sampled","log","client","getClient","transport","getTransport","recordLostEvent","finishedSpans","spans","filter","s","length","reduce","prev","current","contexts","trace","getTraceContext","start_timestamp","startTimestamp","tags","timestamp","type","sdkProcessingMetadata","hasMeasurements","Object","keys","JSON","stringify","op","captureEvent","toContext","spanContext","updateWithContext","_a"],"sources":["../../../src/transaction.ts"],"sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport {\n  Event,\n  Measurements,\n  Transaction as TransactionInterface,\n  TransactionContext,\n  TransactionMetadata,\n} from '@sentry/types';\nimport { dropUndefinedKeys, isInstanceOf, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { Span as SpanClass, SpanRecorder } from './span';\n\n/** JSDoc */\nexport class Transaction extends SpanClass implements TransactionInterface {\n  public name: string;\n\n  public metadata: TransactionMetadata;\n\n  private _measurements: Measurements = {};\n\n  /**\n   * The reference to the current hub.\n   */\n  private readonly _hub: Hub = getCurrentHub() as unknown as Hub;\n\n  private _trimEnd?: boolean;\n\n  /**\n   * This constructor should never be called manually. Those instrumenting tracing should use\n   * `Sentry.startTransaction()`, and internal methods should use `hub.startTransaction()`.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(transactionContext: TransactionContext, hub?: Hub) {\n    super(transactionContext);\n\n    if (isInstanceOf(hub, Hub)) {\n      this._hub = hub as Hub;\n    }\n\n    this.name = transactionContext.name || '';\n\n    this.metadata = transactionContext.metadata || {};\n    this._trimEnd = transactionContext.trimEnd;\n\n    // this is because transactions are also spans, and spans have a transaction pointer\n    this.transaction = this;\n  }\n\n  /**\n   * JSDoc\n   */\n  public setName(name: string): void {\n    this.name = name;\n  }\n\n  /**\n   * Attaches SpanRecorder to the span itself\n   * @param maxlen maximum number of spans that can be recorded\n   */\n  public initSpanRecorder(maxlen: number = 1000): void {\n    if (!this.spanRecorder) {\n      this.spanRecorder = new SpanRecorder(maxlen);\n    }\n    this.spanRecorder.add(this);\n  }\n\n  /**\n   * Set observed measurements for this transaction.\n   * @hidden\n   */\n  public setMeasurements(measurements: Measurements): void {\n    this._measurements = { ...measurements };\n  }\n\n  /**\n   * Set metadata for this transaction.\n   * @hidden\n   */\n  public setMetadata(newMetadata: TransactionMetadata): void {\n    this.metadata = { ...this.metadata, ...newMetadata };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): string | undefined {\n    // This transaction is already finished, so we should not flush it again.\n    if (this.endTimestamp !== undefined) {\n      return undefined;\n    }\n\n    if (!this.name) {\n      IS_DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this.name = '<unlabeled transaction>';\n    }\n\n    // just sets the end timestamp\n    super.finish(endTimestamp);\n\n    if (this.sampled !== true) {\n      // At this point if `sampled !== true` we want to discard the transaction.\n      IS_DEBUG_BUILD && logger.log('[Tracing] Discarding transaction because its trace was not chosen to be sampled.');\n\n      const client = this._hub.getClient();\n      const transport = client && client.getTransport && client.getTransport();\n      if (transport && transport.recordLostEvent) {\n        transport.recordLostEvent('sample_rate', 'transaction');\n      }\n      return undefined;\n    }\n\n    const finishedSpans = this.spanRecorder ? this.spanRecorder.spans.filter(s => s !== this && s.endTimestamp) : [];\n\n    if (this._trimEnd && finishedSpans.length > 0) {\n      this.endTimestamp = finishedSpans.reduce((prev: SpanClass, current: SpanClass) => {\n        if (prev.endTimestamp && current.endTimestamp) {\n          return prev.endTimestamp > current.endTimestamp ? prev : current;\n        }\n        return prev;\n      }).endTimestamp;\n    }\n\n    const transaction: Event = {\n      contexts: {\n        trace: this.getTraceContext(),\n      },\n      spans: finishedSpans,\n      start_timestamp: this.startTimestamp,\n      tags: this.tags,\n      timestamp: this.endTimestamp,\n      transaction: this.name,\n      type: 'transaction',\n      sdkProcessingMetadata: this.metadata,\n    };\n\n    const hasMeasurements = Object.keys(this._measurements).length > 0;\n\n    if (hasMeasurements) {\n      IS_DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction',\n          JSON.stringify(this._measurements, undefined, 2),\n        );\n      transaction.measurements = this._measurements;\n    }\n\n    IS_DEBUG_BUILD && logger.log(`[Tracing] Finishing ${this.op} transaction: ${this.name}.`);\n\n    return this._hub.captureEvent(transaction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): TransactionContext {\n    const spanContext = super.toContext();\n\n    return dropUndefinedKeys({\n      ...spanContext,\n      name: this.name,\n      trimEnd: this._trimEnd,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(transactionContext: TransactionContext): this {\n    super.updateWithContext(transactionContext);\n\n    this.name = transactionContext.name ?? '';\n\n    this._trimEnd = transactionContext.trimEnd;\n\n    return this;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}