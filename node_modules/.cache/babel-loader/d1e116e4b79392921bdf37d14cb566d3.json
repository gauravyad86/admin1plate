{"ast":null,"code":"import { logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\n/** Deduplication filter */\nvar Dedupe = /** @class */function () {\n  function Dedupe() {\n    /**\n     * @inheritDoc\n     */\n    this.name = Dedupe.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  Dedupe.prototype.setupOnce = function (addGlobalEventProcessor, getCurrentHub) {\n    addGlobalEventProcessor(function (currentEvent) {\n      var self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return self._previousEvent = currentEvent;\n        }\n        return self._previousEvent = currentEvent;\n      }\n      return currentEvent;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Dedupe.id = 'Dedupe';\n  return Dedupe;\n}();\nexport { Dedupe };\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent, previousEvent) {\n  if (!previousEvent) {\n    return false;\n  }\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n  return false;\n}\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent, previousEvent) {\n  var currentMessage = currentEvent.message;\n  var previousMessage = previousEvent.message;\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentMessage && !previousMessage || !currentMessage && previousMessage) {\n    return false;\n  }\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent, previousEvent) {\n  var previousException = _getExceptionFromEvent(previousEvent);\n  var currentException = _getExceptionFromEvent(currentEvent);\n  if (!previousException || !currentException) {\n    return false;\n  }\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent, previousEvent) {\n  var currentFrames = _getFramesFromEvent(currentEvent);\n  var previousFrames = _getFramesFromEvent(previousEvent);\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if (currentFrames && !previousFrames || !currentFrames && previousFrames) {\n    return false;\n  }\n  currentFrames = currentFrames;\n  previousFrames = previousFrames;\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n  // Otherwise, compare the two\n  for (var i = 0; i < previousFrames.length; i++) {\n    var frameA = previousFrames[i];\n    var frameB = currentFrames[i];\n    if (frameA.filename !== frameB.filename || frameA.lineno !== frameB.lineno || frameA.colno !== frameB.colno || frameA.function !== frameB.function) {\n      return false;\n    }\n  }\n  return true;\n}\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent, previousEvent) {\n  var currentFingerprint = currentEvent.fingerprint;\n  var previousFingerprint = previousEvent.fingerprint;\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if (currentFingerprint && !previousFingerprint || !currentFingerprint && previousFingerprint) {\n    return false;\n  }\n  currentFingerprint = currentFingerprint;\n  previousFingerprint = previousFingerprint;\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n/** JSDoc */\nfunction _getExceptionFromEvent(event) {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n/** JSDoc */\nfunction _getFramesFromEvent(event) {\n  var exception = event.exception;\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}","map":{"version":3,"names":["logger","IS_DEBUG_BUILD","Dedupe","name","id","prototype","setupOnce","addGlobalEventProcessor","getCurrentHub","currentEvent","self","getIntegration","_shouldDropEvent","_previousEvent","warn","_oO","previousEvent","_isSameMessageEvent","_isSameExceptionEvent","currentMessage","message","previousMessage","_isSameFingerprint","_isSameStacktrace","previousException","_getExceptionFromEvent","currentException","type","value","currentFrames","_getFramesFromEvent","previousFrames","length","i","frameA","frameB","filename","lineno","colno","function","currentFingerprint","fingerprint","previousFingerprint","join","event","exception","values","stacktrace","frames","undefined"],"sources":["../../../../src/integrations/dedupe.ts"],"sourcesContent":["import { Event, EventProcessor, Exception, Hub, Integration, StackFrame } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\n\n/** Deduplication filter */\nexport class Dedupe implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Dedupe';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Dedupe.id;\n\n  /**\n   * @inheritDoc\n   */\n  private _previousEvent?: Event;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(addGlobalEventProcessor: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    addGlobalEventProcessor((currentEvent: Event) => {\n      const self = getCurrentHub().getIntegration(Dedupe);\n      if (self) {\n        // Juuust in case something goes wrong\n        try {\n          if (_shouldDropEvent(currentEvent, self._previousEvent)) {\n            IS_DEBUG_BUILD && logger.warn('Event dropped due to being a duplicate of previously captured event.');\n            return null;\n          }\n        } catch (_oO) {\n          return (self._previousEvent = currentEvent);\n        }\n\n        return (self._previousEvent = currentEvent);\n      }\n      return currentEvent;\n    });\n  }\n}\n\n/** JSDoc */\nfunction _shouldDropEvent(currentEvent: Event, previousEvent?: Event): boolean {\n  if (!previousEvent) {\n    return false;\n  }\n\n  if (_isSameMessageEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  if (_isSameExceptionEvent(currentEvent, previousEvent)) {\n    return true;\n  }\n\n  return false;\n}\n\n/** JSDoc */\nfunction _isSameMessageEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const currentMessage = currentEvent.message;\n  const previousMessage = previousEvent.message;\n\n  // If neither event has a message property, they were both exceptions, so bail out\n  if (!currentMessage && !previousMessage) {\n    return false;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentMessage && !previousMessage) || (!currentMessage && previousMessage)) {\n    return false;\n  }\n\n  if (currentMessage !== previousMessage) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameExceptionEvent(currentEvent: Event, previousEvent: Event): boolean {\n  const previousException = _getExceptionFromEvent(previousEvent);\n  const currentException = _getExceptionFromEvent(currentEvent);\n\n  if (!previousException || !currentException) {\n    return false;\n  }\n\n  if (previousException.type !== currentException.type || previousException.value !== currentException.value) {\n    return false;\n  }\n\n  if (!_isSameFingerprint(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  if (!_isSameStacktrace(currentEvent, previousEvent)) {\n    return false;\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameStacktrace(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFrames = _getFramesFromEvent(currentEvent);\n  let previousFrames = _getFramesFromEvent(previousEvent);\n\n  // If neither event has a stacktrace, they are assumed to be the same\n  if (!currentFrames && !previousFrames) {\n    return true;\n  }\n\n  // If only one event has a stacktrace, but not the other one, they are not the same\n  if ((currentFrames && !previousFrames) || (!currentFrames && previousFrames)) {\n    return false;\n  }\n\n  currentFrames = currentFrames as StackFrame[];\n  previousFrames = previousFrames as StackFrame[];\n\n  // If number of frames differ, they are not the same\n  if (previousFrames.length !== currentFrames.length) {\n    return false;\n  }\n\n  // Otherwise, compare the two\n  for (let i = 0; i < previousFrames.length; i++) {\n    const frameA = previousFrames[i];\n    const frameB = currentFrames[i];\n\n    if (\n      frameA.filename !== frameB.filename ||\n      frameA.lineno !== frameB.lineno ||\n      frameA.colno !== frameB.colno ||\n      frameA.function !== frameB.function\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/** JSDoc */\nfunction _isSameFingerprint(currentEvent: Event, previousEvent: Event): boolean {\n  let currentFingerprint = currentEvent.fingerprint;\n  let previousFingerprint = previousEvent.fingerprint;\n\n  // If neither event has a fingerprint, they are assumed to be the same\n  if (!currentFingerprint && !previousFingerprint) {\n    return true;\n  }\n\n  // If only one event has a fingerprint, but not the other one, they are not the same\n  if ((currentFingerprint && !previousFingerprint) || (!currentFingerprint && previousFingerprint)) {\n    return false;\n  }\n\n  currentFingerprint = currentFingerprint as string[];\n  previousFingerprint = previousFingerprint as string[];\n\n  // Otherwise, compare the two\n  try {\n    return !!(currentFingerprint.join('') === previousFingerprint.join(''));\n  } catch (_oO) {\n    return false;\n  }\n}\n\n/** JSDoc */\nfunction _getExceptionFromEvent(event: Event): Exception | undefined {\n  return event.exception && event.exception.values && event.exception.values[0];\n}\n\n/** JSDoc */\nfunction _getFramesFromEvent(event: Event): StackFrame[] | undefined {\n  const exception = event.exception;\n\n  if (exception) {\n    try {\n      // @ts-ignore Object could be undefined\n      return exception.values[0].stacktrace.frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  } else if (event.stacktrace) {\n    return event.stacktrace.frames;\n  }\n  return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}