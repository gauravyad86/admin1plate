{"ast":null,"code":"import { getOriginalFunction } from '@sentry/utils';\nvar originalFunctionToString;\n/** Patch toString calls to return proper name for wrapped functions */\nvar FunctionToString = /** @class */function () {\n  function FunctionToString() {\n    /**\n     * @inheritDoc\n     */\n    this.name = FunctionToString.id;\n  }\n  /**\n   * @inheritDoc\n   */\n  FunctionToString.prototype.setupOnce = function () {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function () {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      var context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  };\n  /**\n   * @inheritDoc\n   */\n  FunctionToString.id = 'FunctionToString';\n  return FunctionToString;\n}();\nexport { FunctionToString };","map":{"version":3,"names":["getOriginalFunction","originalFunctionToString","FunctionToString","name","id","prototype","setupOnce","Function","toString","args","_i","arguments","length","context","apply"],"sources":["../../../src/integrations/functiontostring.ts"],"sourcesContent":["import { Integration, WrappedFunction } from '@sentry/types';\nimport { getOriginalFunction } from '@sentry/utils';\n\nlet originalFunctionToString: () => void;\n\n/** Patch toString calls to return proper name for wrapped functions */\nexport class FunctionToString implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'FunctionToString';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = FunctionToString.id;\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    originalFunctionToString = Function.prototype.toString;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    Function.prototype.toString = function (this: WrappedFunction, ...args: any[]): string {\n      const context = getOriginalFunction(this) || this;\n      return originalFunctionToString.apply(context, args);\n    };\n  }\n}\n"],"mappings":"AACA,SAASA,mBAAmB,QAAQ,eAAe;AAEnD,IAAIC,wBAAoC;AAExC;AACA,IAAAC,gBAAA;EAAA,SAAAA,iBAAA;IAME;;;IAGO,KAAAC,IAAI,GAAWD,gBAAgB,CAACE,EAAE;EAe3C;EAbE;;;EAGOF,gBAAA,CAAAG,SAAA,CAAAC,SAAS,GAAhB;IACE;IACAL,wBAAwB,GAAGM,QAAQ,CAACF,SAAS,CAACG,QAAQ;IAEtD;IACAD,QAAQ,CAACF,SAAS,CAACG,QAAQ,GAAG;MAAiC,IAAAC,IAAA;WAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;QAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;MAC7D,IAAMG,OAAO,GAAGb,mBAAmB,CAAC,IAAI,CAAC,IAAI,IAAI;MACjD,OAAOC,wBAAwB,CAACa,KAAK,CAACD,OAAO,EAAEJ,IAAI,CAAC;IACtD,CAAC;EACH,CAAC;EAtBD;;;EAGcP,gBAAA,CAAAE,EAAE,GAAW,kBAAkB;EAoB/C,OAAAF,gBAAC;CAAA,CAxBD;SAAaA,gBAAgB"},"metadata":{},"sourceType":"module"}