{"ast":null,"code":"import { __assign, __values } from \"tslib\";\nexport var DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header, now) {\n  if (now === void 0) {\n    now = Date.now();\n  }\n  var headerDelay = parseInt(\"\" + header, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  var headerDate = Date.parse(\"\" + header);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits, category) {\n  return limits[category] || limits.all || 0;\n}\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits, category, now) {\n  if (now === void 0) {\n    now = Date.now();\n  }\n  return disabledUntil(limits, category) > now;\n}\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(limits, headers, now) {\n  var e_1, _a, e_2, _b;\n  if (now === void 0) {\n    now = Date.now();\n  }\n  var updatedRateLimits = __assign({}, limits);\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  var rateLimitHeader = headers['x-sentry-rate-limits'];\n  var retryAfterHeader = headers['retry-after'];\n  if (rateLimitHeader) {\n    try {\n      /**\n       * rate limit headers are of the form\n       *     <header>,<header>,..\n       * where each <header> is of the form\n       *     <retry_after>: <categories>: <scope>: <reason_code>\n       * where\n       *     <retry_after> is a delay in seconds\n       *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n       *         <category>;<category>;...\n       *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n       *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n       */\n      for (var _c = __values(rateLimitHeader.trim().split(',')), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var limit = _d.value;\n        var parameters = limit.split(':', 2);\n        var headerDelay = parseInt(parameters[0], 10);\n        var delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n        if (!parameters[1]) {\n          updatedRateLimits.all = now + delay;\n        } else {\n          try {\n            for (var _e = (e_2 = void 0, __values(parameters[1].split(';'))), _f = _e.next(); !_f.done; _f = _e.next()) {\n              var category = _f.value;\n              updatedRateLimits[category] = now + delay;\n            }\n          } catch (e_2_1) {\n            e_2 = {\n              error: e_2_1\n            };\n          } finally {\n            try {\n              if (_f && !_f.done && (_b = _e.return)) _b.call(_e);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  }\n  return updatedRateLimits;\n}","map":{"version":3,"names":["DEFAULT_RETRY_AFTER","parseRetryAfterHeader","header","now","Date","headerDelay","parseInt","isNaN","headerDate","parse","disabledUntil","limits","category","all","isRateLimited","updateRateLimits","headers","updatedRateLimits","__assign","rateLimitHeader","retryAfterHeader","_c","__values","trim","split","_d","next","done","limit","value","parameters","delay","_e","e_2","_f"],"sources":["../../src/ratelimit.ts"],"sourcesContent":["// Keeping the key broad until we add the new transports\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that given category is disabled until for rate limiting\n */\nexport function disabledUntil(limits: RateLimits, category: string): number {\n  return limits[category] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, category: string, now: number = Date.now()): boolean {\n  return disabledUntil(limits, category) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n * Returns true if headers contains a non-empty rate limiting header.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  headers: Record<string, string | null | undefined>,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers['x-sentry-rate-limits'];\n  const retryAfterHeader = headers['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const parameters = limit.split(':', 2);\n      const headerDelay = parseInt(parameters[0], 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!parameters[1]) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of parameters[1].split(';')) {\n          updatedRateLimits[category] = now + delay;\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  }\n\n  return updatedRateLimits;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}