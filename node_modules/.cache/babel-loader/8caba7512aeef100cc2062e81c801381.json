{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf } from '@sentry/utils';\nimport { exceptionFromError } from '../eventbuilder';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\nexport { LinkedErrors };\n/**\n * @inheritDoc\n */\nexport function _handler(key, limit, event, hint) {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  var linkedErrors = _walkErrorTree(limit, hint.originalException, key);\n  event.exception.values = __spread(linkedErrors, event.exception.values);\n  return event;\n}\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit, error, key, stack) {\n  if (stack === void 0) {\n    stack = [];\n  }\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  var exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, __spread([exception], stack));\n}","map":{"version":3,"names":["addGlobalEventProcessor","getCurrentHub","isInstanceOf","exceptionFromError","DEFAULT_KEY","DEFAULT_LIMIT","LinkedErrors","options","name","id","_key","key","_limit","limit","prototype","setupOnce","event","hint","self","getIntegration","_handler","exception","values","originalException","Error","linkedErrors","_walkErrorTree","__spread","error","stack","length"],"sources":["../../../../src/integrations/linkederrors.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf } from '@sentry/utils';\n\nimport { exceptionFromError } from '../eventbuilder';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\ninterface LinkedErrorsOptions {\n  key: string;\n  limit: number;\n}\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: LinkedErrorsOptions['key'];\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: LinkedErrorsOptions['limit'];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: Partial<LinkedErrorsOptions> = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      return self ? _handler(self._key, self._limit, event, hint) : event;\n    });\n  }\n}\n\n/**\n * @inheritDoc\n */\nexport function _handler(key: string, limit: number, event: Event, hint?: EventHint): Event | null {\n  if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return event;\n  }\n  const linkedErrors = _walkErrorTree(limit, hint.originalException as ExtendedError, key);\n  event.exception.values = [...linkedErrors, ...event.exception.values];\n  return event;\n}\n\n/**\n * JSDOC\n */\nexport function _walkErrorTree(limit: number, error: ExtendedError, key: string, stack: Exception[] = []): Exception[] {\n  if (!isInstanceOf(error[key], Error) || stack.length + 1 >= limit) {\n    return stack;\n  }\n  const exception = exceptionFromError(error[key]);\n  return _walkErrorTree(limit, error[key], key, [exception, ...stack]);\n}\n"],"mappings":";AAAA,SAASA,uBAAuB,EAAEC,aAAa,QAAQ,cAAc;AAErE,SAASC,YAAY,QAAQ,eAAe;AAE5C,SAASC,kBAAkB,QAAQ,iBAAiB;AAEpD,IAAMC,WAAW,GAAG,OAAO;AAC3B,IAAMC,aAAa,GAAG,CAAC;AAOvB;AACA,IAAAC,YAAA;EAqBE;;;EAGA,SAAAA,aAAmBC,OAA0C;IAA1C,IAAAA,OAAA;MAAAA,OAAA,KAA0C;IAAA;IAlB7D;;;IAGgB,KAAAC,IAAI,GAAWF,YAAY,CAACG,EAAE;IAgB5C,IAAI,CAACC,IAAI,GAAGH,OAAO,CAACI,GAAG,IAAIP,WAAW;IACtC,IAAI,CAACQ,MAAM,GAAGL,OAAO,CAACM,KAAK,IAAIR,aAAa;EAC9C;EAEA;;;EAGOC,YAAA,CAAAQ,SAAA,CAAAC,SAAS,GAAhB;IACEf,uBAAuB,CAAC,UAACgB,KAAY,EAAEC,IAAgB;MACrD,IAAMC,IAAI,GAAGjB,aAAa,EAAE,CAACkB,cAAc,CAACb,YAAY,CAAC;MACzD,OAAOY,IAAI,GAAGE,QAAQ,CAACF,IAAI,CAACR,IAAI,EAAEQ,IAAI,CAACN,MAAM,EAAEI,KAAK,EAAEC,IAAI,CAAC,GAAGD,KAAK;IACrE,CAAC,CAAC;EACJ,CAAC;EApCD;;;EAGcV,YAAA,CAAAG,EAAE,GAAW,cAAc;EAkC3C,OAAAH,YAAC;CAAA,CAtCD;SAAaA,YAAY;AAwCzB;;;AAGA,OAAM,SAAUc,QAAQA,CAACT,GAAW,EAAEE,KAAa,EAAEG,KAAY,EAAEC,IAAgB;EACjF,IAAI,CAACD,KAAK,CAACK,SAAS,IAAI,CAACL,KAAK,CAACK,SAAS,CAACC,MAAM,IAAI,CAACL,IAAI,IAAI,CAACf,YAAY,CAACe,IAAI,CAACM,iBAAiB,EAAEC,KAAK,CAAC,EAAE;IACxG,OAAOR,KAAK;;EAEd,IAAMS,YAAY,GAAGC,cAAc,CAACb,KAAK,EAAEI,IAAI,CAACM,iBAAkC,EAAEZ,GAAG,CAAC;EACxFK,KAAK,CAACK,SAAS,CAACC,MAAM,GAAAK,QAAA,CAAOF,YAAY,EAAKT,KAAK,CAACK,SAAS,CAACC,MAAM,CAAC;EACrE,OAAON,KAAK;AACd;AAEA;;;AAGA,OAAM,SAAUU,cAAcA,CAACb,KAAa,EAAEe,KAAoB,EAAEjB,GAAW,EAAEkB,KAAuB;EAAvB,IAAAA,KAAA;IAAAA,KAAA,KAAuB;EAAA;EACtG,IAAI,CAAC3B,YAAY,CAAC0B,KAAK,CAACjB,GAAG,CAAC,EAAEa,KAAK,CAAC,IAAIK,KAAK,CAACC,MAAM,GAAG,CAAC,IAAIjB,KAAK,EAAE;IACjE,OAAOgB,KAAK;;EAEd,IAAMR,SAAS,GAAGlB,kBAAkB,CAACyB,KAAK,CAACjB,GAAG,CAAC,CAAC;EAChD,OAAOe,cAAc,CAACb,KAAK,EAAEe,KAAK,CAACjB,GAAG,CAAC,EAAEA,GAAG,EAAAgB,QAAA,EAAGN,SAAS,GAAKQ,KAAK,EAAE;AACtE"},"metadata":{},"sourceType":"module"}