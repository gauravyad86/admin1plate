{"ast":null,"code":"import { __read } from \"tslib\";\nimport { SentryError } from './error';\nimport { IS_DEBUG_BUILD } from './flags';\n/** Regular expression used to parse a Dsn. */\nvar DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn, withPassword) {\n  if (withPassword === void 0) {\n    withPassword = false;\n  }\n  var host = dsn.host,\n    path = dsn.path,\n    pass = dsn.pass,\n    port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol,\n    publicKey = dsn.publicKey;\n  return protocol + \"://\" + publicKey + (withPassword && pass ? \":\" + pass : '') + (\"@\" + host + (port ? \":\" + port : '') + \"/\" + (path ? path + \"/\" : path) + projectId);\n}\nfunction dsnFromString(str) {\n  var match = DSN_REGEX.exec(str);\n  if (!match) {\n    throw new SentryError(\"Invalid Sentry Dsn: \" + str);\n  }\n  var _a = __read(match.slice(1), 6),\n    protocol = _a[0],\n    publicKey = _a[1],\n    _b = _a[2],\n    pass = _b === void 0 ? '' : _b,\n    host = _a[3],\n    _c = _a[4],\n    port = _c === void 0 ? '' : _c,\n    lastPath = _a[5];\n  var path = '';\n  var projectId = lastPath;\n  var split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop();\n  }\n  if (projectId) {\n    var projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n  return dsnFromComponents({\n    host: host,\n    pass: pass,\n    path: path,\n    projectId: projectId,\n    port: port,\n    protocol: protocol,\n    publicKey: publicKey\n  });\n}\nfunction dsnFromComponents(components) {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId\n  };\n}\nfunction validateDsn(dsn) {\n  if (!IS_DEBUG_BUILD) {\n    return;\n  }\n  var port = dsn.port,\n    projectId = dsn.projectId,\n    protocol = dsn.protocol;\n  var requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(function (component) {\n    if (!dsn[component]) {\n      throw new SentryError(\"Invalid Sentry Dsn: \" + component + \" missing\");\n    }\n  });\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid projectId \" + projectId);\n  }\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid protocol \" + protocol);\n  }\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(\"Invalid Sentry Dsn: Invalid port \" + port);\n  }\n  return true;\n}\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from) {\n  var components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  validateDsn(components);\n  return components;\n}","map":{"version":3,"names":["SentryError","IS_DEBUG_BUILD","DSN_REGEX","isValidProtocol","protocol","dsnToString","dsn","withPassword","host","path","pass","port","projectId","publicKey","dsnFromString","str","match","exec","_a","__read","slice","_b","_c","lastPath","split","length","join","pop","projectMatch","dsnFromComponents","components","user","validateDsn","requiredComponents","forEach","component","isNaN","parseInt","makeDsn","from"],"sources":["../../src/dsn.ts"],"sourcesContent":["import { DsnComponents, DsnLike, DsnProtocol } from '@sentry/types';\n\nimport { SentryError } from './error';\nimport { IS_DEBUG_BUILD } from './flags';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+))?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol?: string): protocol is DsnProtocol {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nexport function dsnToString(dsn: DsnComponents, withPassword: boolean = false): string {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\nfunction dsnFromString(str: string): DsnComponents {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    throw new SentryError(`Invalid Sentry Dsn: ${str}`);\n  }\n\n  const [protocol, publicKey, pass = '', host, port = '', lastPath] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() as string;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol as DsnProtocol, publicKey });\n}\n\nfunction dsnFromComponents(components: DsnComponents): DsnComponents {\n  // TODO this is for backwards compatibility, and can be removed in a future version\n  if ('user' in components && !('publicKey' in components)) {\n    components.publicKey = components.user;\n  }\n\n  return {\n    user: components.publicKey || '',\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn: DsnComponents): boolean | void {\n  if (!IS_DEBUG_BUILD) {\n    return;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents: ReadonlyArray<keyof DsnComponents> = ['protocol', 'publicKey', 'host', 'projectId'];\n  requiredComponents.forEach(component => {\n    if (!dsn[component]) {\n      throw new SentryError(`Invalid Sentry Dsn: ${component} missing`);\n    }\n  });\n\n  if (!projectId.match(/^\\d+$/)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n  }\n\n  if (!isValidProtocol(protocol)) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    throw new SentryError(`Invalid Sentry Dsn: Invalid port ${port}`);\n  }\n\n  return true;\n}\n\n/** The Sentry Dsn, identifying a Sentry instance and project. */\nexport function makeDsn(from: DsnLike): DsnComponents {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n\n  validateDsn(components);\n\n  return components;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}