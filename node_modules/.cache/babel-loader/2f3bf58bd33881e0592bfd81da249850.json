{"ast":null,"code":"import { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\nvar SENTRY_API_VERSION = '7';\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nvar API = /** @class */function () {\n  /** Create a new instance of API */\n  function API(dsn, metadata, tunnel) {\n    if (metadata === void 0) {\n      metadata = {};\n    }\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n  /** Returns the Dsn object. */\n  API.prototype.getDsn = function () {\n    return this._dsnObject;\n  };\n  /** Does this transport force envelopes? */\n  API.prototype.forceEnvelope = function () {\n    return !!this._tunnel;\n  };\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  API.prototype.getBaseApiEndpoint = function () {\n    return getBaseApiEndpoint(this._dsnObject);\n  };\n  /** Returns the store endpoint URL. */\n  API.prototype.getStoreEndpoint = function () {\n    return getStoreEndpoint(this._dsnObject);\n  };\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getStoreEndpointWithUrlEncodedAuth = function () {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  };\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  API.prototype.getEnvelopeEndpointWithUrlEncodedAuth = function () {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  };\n  return API;\n}();\nexport { API };\n/** Initializes API Details */\nexport function initAPIDetails(dsn, metadata, tunnel) {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel: tunnel\n  };\n}\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  var protocol = dsn.protocol ? dsn.protocol + \":\" : '';\n  var port = dsn.port ? \":\" + dsn.port : '';\n  return protocol + \"//\" + dsn.host + port + (dsn.path ? \"/\" + dsn.path : '') + \"/api/\";\n}\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn, target) {\n  return \"\" + getBaseApiEndpoint(dsn) + dsn.projectId + \"/\" + target + \"/\";\n}\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn) {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION\n  });\n}\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'store');\n}\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn) {\n  return getStoreEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn) {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel) {\n  return tunnel ? tunnel : _getEnvelopeEndpoint(dsn) + \"?\" + _encodedAuth(dsn);\n}\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(dsn, clientName, clientVersion) {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  var header = [\"Sentry sentry_version=\" + SENTRY_API_VERSION];\n  header.push(\"sentry_client=\" + clientName + \"/\" + clientVersion);\n  header.push(\"sentry_key=\" + dsn.publicKey);\n  if (dsn.pass) {\n    header.push(\"sentry_secret=\" + dsn.pass);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', ')\n  };\n}\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike, dialogOptions) {\n  var dsn = makeDsn(dsnLike);\n  var endpoint = getBaseApiEndpoint(dsn) + \"embed/error-page/\";\n  var encodedOptions = \"dsn=\" + dsnToString(dsn);\n  for (var key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += \"&name=\" + encodeURIComponent(dialogOptions.user.name);\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += \"&email=\" + encodeURIComponent(dialogOptions.user.email);\n      }\n    } else {\n      encodedOptions += \"&\" + encodeURIComponent(key) + \"=\" + encodeURIComponent(dialogOptions[key]);\n    }\n  }\n  return endpoint + \"?\" + encodedOptions;\n}","map":{"version":3,"names":["dsnToString","makeDsn","urlEncode","SENTRY_API_VERSION","API","dsn","metadata","tunnel","_dsnObject","_tunnel","prototype","getDsn","forceEnvelope","getBaseApiEndpoint","getStoreEndpoint","getStoreEndpointWithUrlEncodedAuth","getEnvelopeEndpointWithUrlEncodedAuth","initAPIDetails","initDsn","protocol","port","host","path","_getIngestEndpoint","target","projectId","_encodedAuth","sentry_key","publicKey","sentry_version","_getEnvelopeEndpoint","getRequestHeaders","clientName","clientVersion","header","push","pass","join","getReportDialogEndpoint","dsnLike","dialogOptions","endpoint","encodedOptions","key","user","name","encodeURIComponent","email"],"sources":["../../src/api.ts"],"sourcesContent":["import { DsnComponents, DsnLike, SdkMetadata } from '@sentry/types';\nimport { dsnToString, makeDsn, urlEncode } from '@sentry/utils';\n\nconst SENTRY_API_VERSION = '7';\n\n/**\n * Stores details about a Sentry SDK\n */\nexport interface APIDetails {\n  /** The DSN as passed to Sentry.init() */\n  initDsn: DsnLike;\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  metadata: SdkMetadata;\n  /** The internally used Dsn object. */\n  readonly dsn: DsnComponents;\n  /** The envelope tunnel to use. */\n  readonly tunnel?: string;\n}\n\n/**\n * Helper class to provide urls, headers and metadata that can be used to form\n * different types of requests to Sentry endpoints.\n * Supports both envelopes and regular event requests.\n *\n * @deprecated Please use APIDetails\n **/\nexport class API {\n  /** The DSN as passed to Sentry.init() */\n  public dsn: DsnLike;\n\n  /** Metadata about the SDK (name, version, etc) for inclusion in envelope headers */\n  public metadata: SdkMetadata;\n\n  /** The internally used Dsn object. */\n  private readonly _dsnObject: DsnComponents;\n\n  /** The envelope tunnel to use. */\n  private readonly _tunnel?: string;\n\n  /** Create a new instance of API */\n  public constructor(dsn: DsnLike, metadata: SdkMetadata = {}, tunnel?: string) {\n    this.dsn = dsn;\n    this._dsnObject = makeDsn(dsn);\n    this.metadata = metadata;\n    this._tunnel = tunnel;\n  }\n\n  /** Returns the Dsn object. */\n  public getDsn(): DsnComponents {\n    return this._dsnObject;\n  }\n\n  /** Does this transport force envelopes? */\n  public forceEnvelope(): boolean {\n    return !!this._tunnel;\n  }\n\n  /** Returns the prefix to construct Sentry ingestion API endpoints. */\n  public getBaseApiEndpoint(): string {\n    return getBaseApiEndpoint(this._dsnObject);\n  }\n\n  /** Returns the store endpoint URL. */\n  public getStoreEndpoint(): string {\n    return getStoreEndpoint(this._dsnObject);\n  }\n\n  /**\n   * Returns the store endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getStoreEndpointWithUrlEncodedAuth(): string {\n    return getStoreEndpointWithUrlEncodedAuth(this._dsnObject);\n  }\n\n  /**\n   * Returns the envelope endpoint URL with auth in the query string.\n   *\n   * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n   */\n  public getEnvelopeEndpointWithUrlEncodedAuth(): string {\n    return getEnvelopeEndpointWithUrlEncodedAuth(this._dsnObject, this._tunnel);\n  }\n}\n\n/** Initializes API Details */\nexport function initAPIDetails(dsn: DsnLike, metadata?: SdkMetadata, tunnel?: string): APIDetails {\n  return {\n    initDsn: dsn,\n    metadata: metadata || {},\n    dsn: makeDsn(dsn),\n    tunnel,\n  } as APIDetails;\n}\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents, target: 'store' | 'envelope'): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/${target}/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents): string {\n  return urlEncode({\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    sentry_key: dsn.publicKey,\n    sentry_version: SENTRY_API_VERSION,\n  });\n}\n\n/** Returns the store endpoint URL. */\nfunction getStoreEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'store');\n}\n\n/**\n * Returns the store endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getStoreEndpointWithUrlEncodedAuth(dsn: DsnComponents): string {\n  return `${getStoreEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/** Returns the envelope endpoint URL. */\nfunction _getEnvelopeEndpoint(dsn: DsnComponents): string {\n  return _getIngestEndpoint(dsn, 'envelope');\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string): string {\n  return tunnel ? tunnel : `${_getEnvelopeEndpoint(dsn)}?${_encodedAuth(dsn)}`;\n}\n\n/**\n * Returns an object that can be used in request headers.\n * This is needed for node and the old /store endpoint in sentry\n */\nexport function getRequestHeaders(\n  dsn: DsnComponents,\n  clientName: string,\n  clientVersion: string,\n): { [key: string]: string } {\n  // CHANGE THIS to use metadata but keep clientName and clientVersion compatible\n  const header = [`Sentry sentry_version=${SENTRY_API_VERSION}`];\n  header.push(`sentry_client=${clientName}/${clientVersion}`);\n  header.push(`sentry_key=${dsn.publicKey}`);\n  if (dsn.pass) {\n    header.push(`sentry_secret=${dsn.pass}`);\n  }\n  return {\n    'Content-Type': 'application/json',\n    'X-Sentry-Auth': header.join(', '),\n  };\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(\n  dsnLike: DsnLike,\n  dialogOptions: {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n    user?: { name?: string; email?: string };\n  },\n): string {\n  const dsn = makeDsn(dsnLike);\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'user') {\n      if (!dialogOptions.user) {\n        continue;\n      }\n      if (dialogOptions.user.name) {\n        encodedOptions += `&name=${encodeURIComponent(dialogOptions.user.name)}`;\n      }\n      if (dialogOptions.user.email) {\n        encodedOptions += `&email=${encodeURIComponent(dialogOptions.user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}