{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { msToSec } from '../utils';\nimport { getCLS } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nvar global = getGlobalObject();\n/** Class tracking metrics  */\nvar MetricsInstrumentation = /** @class */function () {\n  function MetricsInstrumentation(_reportAllChanges) {\n    if (_reportAllChanges === void 0) {\n      _reportAllChanges = false;\n    }\n    this._reportAllChanges = _reportAllChanges;\n    this._measurements = {};\n    this._performanceCursor = 0;\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n  /** Add performance related spans to a transaction */\n  MetricsInstrumentation.prototype.addPerformanceEntries = function (transaction) {\n    var _this = this;\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n    IS_DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n    var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    var responseStartTimestamp;\n    var requestStartTimestamp;\n    global.performance.getEntries().slice(this._performanceCursor).forEach(function (entry) {\n      var startTime = msToSec(entry.startTime);\n      var duration = msToSec(entry.duration);\n      if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n        return;\n      }\n      switch (entry.entryType) {\n        case 'navigation':\n          {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart);\n            break;\n          }\n        case 'mark':\n        case 'paint':\n        case 'measure':\n          {\n            var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n            var firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            var shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n            if (entry.name === 'first-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n              _this._measurements['fp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fp'] = {\n                value: startTimestamp\n              };\n            }\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n              _this._measurements['fcp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fcp'] = {\n                value: startTimestamp\n              };\n            }\n            break;\n          }\n        case 'resource':\n          {\n            var resourceName = entry.name.replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n        default:\n        // Ignore other entry types.\n      }\n    });\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n    this._trackNavigator(transaction);\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n      var timeOrigin_1 = msToSec(browserPerformanceTimeOrigin);\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        IS_DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = {\n          value: (responseStartTimestamp - transaction.startTimestamp) * 1000\n        };\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = {\n            value: (responseStartTimestamp - requestStartTimestamp) * 1000\n          };\n        }\n      }\n      ['fcp', 'fp', 'lcp'].forEach(function (name) {\n        if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {\n          return;\n        }\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n        var oldValue = _this._measurements[name].value;\n        var measurementTimestamp = timeOrigin_1 + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n        var delta = normalizedValue - oldValue;\n        IS_DEBUG_BUILD && logger.log(\"[Measurements] Normalized \" + name + \" from \" + oldValue + \" to \" + normalizedValue + \" (\" + delta + \")\");\n        _this._measurements[name].value = normalizedValue;\n      });\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value\n        });\n      }\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  };\n  /**\n   * Capture the information of the user agent.\n   */\n  MetricsInstrumentation.prototype._trackNavigator = function (transaction) {\n    var navigator = global.navigator;\n    if (!navigator) {\n      return;\n    }\n    // track network connectivity\n    var connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = {\n          value: connection.rtt\n        };\n      }\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = {\n          value: connection.downlink\n        };\n      }\n    }\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  };\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  MetricsInstrumentation.prototype._trackCLS = function () {\n    var _this = this;\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n      _this._measurements['cls'] = {\n        value: metric.value\n      };\n      _this._clsEntry = entry;\n    });\n  };\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  MetricsInstrumentation.prototype._trackLCP = function () {\n    var _this = this;\n    getLCP(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n      var startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n      _this._measurements['lcp'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.lcp'] = {\n        value: timeOrigin + startTime\n      };\n      _this._lcpEntry = entry;\n    }, this._reportAllChanges);\n  };\n  /** Starts tracking the First Input Delay on the current page. */\n  MetricsInstrumentation.prototype._trackFID = function () {\n    var _this = this;\n    getFID(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n      var startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n      _this._measurements['fid'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.fid'] = {\n        value: timeOrigin + startTime\n      };\n    });\n  };\n  return MetricsInstrumentation;\n}();\nexport { MetricsInstrumentation };\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction, entry, timeOrigin) {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(function (event) {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n/** Create measure related spans */\nfunction addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n/** Create resource-related spans */\nexport function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n  var data = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\" + entry.initiatorType : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n}\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, description, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[event + \"End\"];\n  var start = entry[event + \"Start\"];\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description !== null && description !== void 0 ? description : event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n/** Create request and response related spans */\nfunction addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction, _a) {\n  var startTimestamp = _a.startTimestamp,\n    ctx = __rest(_a, [\"startTimestamp\"]);\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild(__assign({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(transaction, lcpEntry, clsEntry) {\n  if (lcpEntry) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n    // Capture Properties of the LCP element that contributes to the LCP.\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach(function (source, index) {\n      return transaction.setTag(\"cls.source.\" + (index + 1), htmlTreeAsString(source.node));\n    });\n  }\n}","map":{"version":3,"names":["browserPerformanceTimeOrigin","getGlobalObject","htmlTreeAsString","isNodeEnv","logger","IS_DEBUG_BUILD","msToSec","getCLS","getFID","getLCP","getVisibilityWatcher","global","MetricsInstrumentation","_reportAllChanges","_measurements","_performanceCursor","performance","document","mark","_trackCLS","_trackLCP","_trackFID","prototype","addPerformanceEntries","transaction","_this","getEntries","log","timeOrigin","responseStartTimestamp","requestStartTimestamp","slice","forEach","entry","startTime","duration","op","startTimestamp","entryType","addNavigationSpans","responseStart","requestStart","addMeasureSpans","firstHidden","shouldRecord","firstHiddenTime","name","value","resourceName","replace","location","origin","addResourceSpans","Math","max","length","_trackNavigator","timeOrigin_1","oldValue","measurementTimestamp","normalizedValue","abs","delta","_startChild","description","endTimestamp","cls","setMeasurements","tagMetricInfo","_lcpEntry","_clsEntry","setTag","navigator","connection","effectiveType","type","isMeasurementValue","rtt","downlink","deviceMemory","String","hardwareConcurrency","metric","entries","pop","event","addPerformanceNavigationTiming","addRequest","measureStartTimestamp","measureEndTimestamp","initiatorType","data","transferSize","encodedBodySize","decodedBodySize","eventEnd","end","start","responseEnd","_a","ctx","__rest","startChild","__assign","isFinite","lcpEntry","clsEntry","element","id","url","trim","size","sources","source","index","node"],"sources":["../../../../src/browser/metrics.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, htmlTreeAsString, isNodeEnv, logger } from '@sentry/utils';\n\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS, LayoutShift } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP, LargestContentfulPaint } from './web-vitals/getLCP';\nimport { getVisibilityWatcher } from './web-vitals/lib/getVisibilityWatcher';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n  private _lcpEntry: LargestContentfulPaint | undefined;\n  private _clsEntry: LayoutShift | undefined;\n\n  public constructor(private _reportAllChanges: boolean = false) {\n    if (!isNodeEnv() && global && global.performance && global.document) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    IS_DEBUG_BUILD && logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n    let responseStartTimestamp: number | undefined;\n    let requestStartTimestamp: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation': {\n            addNavigationSpans(transaction, entry, timeOrigin);\n            responseStartTimestamp = timeOrigin + msToSec(entry.responseStart as number);\n            requestStartTimestamp = timeOrigin + msToSec(entry.requestStart as number);\n            break;\n          }\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            // capture web vitals\n\n            const firstHidden = getVisibilityWatcher();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.firstHiddenTime;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              IS_DEBUG_BUILD && logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(global.location.origin, '');\n            addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      // Generate TTFB (Time to First Byte), which measured as the time between the beginning of the transaction and the\n      // start of the response in milliseconds\n      if (typeof responseStartTimestamp === 'number') {\n        IS_DEBUG_BUILD && logger.log('[Measurements] Adding TTFB');\n        this._measurements['ttfb'] = { value: (responseStartTimestamp - transaction.startTimestamp) * 1000 };\n\n        if (typeof requestStartTimestamp === 'number' && requestStartTimestamp <= responseStartTimestamp) {\n          // Capture the time spent making the request and receiving the first byte of the response.\n          // This is the time between the start of the request and the start of the response in milliseconds.\n          this._measurements['ttfb.requestTime'] = { value: (responseStartTimestamp - requestStartTimestamp) * 1000 };\n        }\n      }\n\n      ['fcp', 'fp', 'lcp'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        IS_DEBUG_BUILD &&\n          logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      // If FCP is not recorded we should not record the cls value\n      // according to the new definition of CLS.\n      if (!('fcp' in this._measurements)) {\n        delete this._measurements.cls;\n      }\n\n      transaction.setMeasurements(this._measurements);\n      tagMetricInfo(transaction, this._lcpEntry, this._clsEntry);\n      transaction.setTag('sentry_reportAllChanges', this._reportAllChanges);\n    }\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    // See:\n    // https://web.dev/evolving-cls/\n    // https://web.dev/cls-web-tooling/\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n      this._clsEntry = entry as LayoutShift;\n    });\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n      this._lcpEntry = entry as LargestContentfulPaint;\n    }, this._reportAllChanges);\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin as number);\n      const startTime = msToSec(entry.startTime);\n      IS_DEBUG_BUILD && logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  ['unloadEvent', 'redirect', 'domContentLoadedEvent', 'loadEvent', 'connect'].forEach(event => {\n    addPerformanceNavigationTiming(transaction, entry, event, timeOrigin);\n  });\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'TLS/SSL', 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'cache', 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin, 'DNS');\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): void {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  description?: string,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: description ?? event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n\n/** Add LCP / CLS data to transaction to allow debugging */\nfunction tagMetricInfo(\n  transaction: Transaction,\n  lcpEntry: MetricsInstrumentation['_lcpEntry'],\n  clsEntry: MetricsInstrumentation['_clsEntry'],\n): void {\n  if (lcpEntry) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding LCP Data');\n\n    // Capture Properties of the LCP element that contributes to the LCP.\n\n    if (lcpEntry.element) {\n      transaction.setTag('lcp.element', htmlTreeAsString(lcpEntry.element));\n    }\n\n    if (lcpEntry.id) {\n      transaction.setTag('lcp.id', lcpEntry.id);\n    }\n\n    if (lcpEntry.url) {\n      // Trim URL to the first 200 characters.\n      transaction.setTag('lcp.url', lcpEntry.url.trim().slice(0, 200));\n    }\n\n    transaction.setTag('lcp.size', lcpEntry.size);\n  }\n\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift\n  if (clsEntry && clsEntry.sources) {\n    IS_DEBUG_BUILD && logger.log('[Measurements] Adding CLS Data');\n    clsEntry.sources.forEach((source, index) =>\n      transaction.setTag(`cls.source.${index + 1}`, htmlTreeAsString(source.node)),\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}