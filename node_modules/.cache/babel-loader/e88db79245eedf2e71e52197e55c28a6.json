{"ast":null,"code":"/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nexport var getCLS = function (onReport, reportAllChanges) {\n  var metric = initMetric('CLS', 0);\n  var report;\n  var sessionValue = 0;\n  var sessionEntries = [];\n  var entryHandler = function (entry) {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      var firstSessionEntry = sessionEntries[0];\n      var lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (sessionValue && sessionEntries.length !== 0 && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n  var po = observe('layout-shift', entryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n    onHidden(function () {\n      po.takeRecords().map(entryHandler);\n      report(true);\n    });\n  }\n};","map":{"version":3,"names":["bindReporter","initMetric","observe","onHidden","getCLS","onReport","reportAllChanges","metric","report","sessionValue","sessionEntries","entryHandler","entry","hadRecentInput","firstSessionEntry","lastSessionEntry","length","startTime","value","push","entries","po","takeRecords","map"],"sources":["../../../../../src/browser/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { observe, PerformanceEntryHandler } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { ReportHandler } from './types';\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\nexport interface LayoutShift extends PerformanceEntry {\n  value: number;\n  hadRecentInput: boolean;\n  sources: Array<LayoutShiftAttribution>;\n  toJSON(): Record<string, unknown>;\n}\n\nexport interface LayoutShiftAttribution {\n  node?: Node;\n  previousRect: DOMRectReadOnly;\n  currentRect: DOMRectReadOnly;\n}\n\nexport const getCLS = (onReport: ReportHandler, reportAllChanges?: boolean): void => {\n  const metric = initMetric('CLS', 0);\n  let report: ReturnType<typeof bindReporter>;\n\n  let sessionValue = 0;\n  let sessionEntries: PerformanceEntry[] = [];\n\n  const entryHandler = (entry: LayoutShift): void => {\n    // Only count layout shifts without recent user input.\n    // TODO: Figure out why entry can be undefined\n    if (entry && !entry.hadRecentInput) {\n      const firstSessionEntry = sessionEntries[0];\n      const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n\n      // If the entry occurred less than 1 second after the previous entry and\n      // less than 5 seconds after the first entry in the session, include the\n      // entry in the current session. Otherwise, start a new session.\n      if (\n        sessionValue &&\n        sessionEntries.length !== 0 &&\n        entry.startTime - lastSessionEntry.startTime < 1000 &&\n        entry.startTime - firstSessionEntry.startTime < 5000\n      ) {\n        sessionValue += entry.value;\n        sessionEntries.push(entry);\n      } else {\n        sessionValue = entry.value;\n        sessionEntries = [entry];\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (sessionValue > metric.value) {\n        metric.value = sessionValue;\n        metric.entries = sessionEntries;\n        if (report) {\n          report();\n        }\n      }\n    }\n  };\n\n  const po = observe('layout-shift', entryHandler as PerformanceEntryHandler);\n  if (po) {\n    report = bindReporter(onReport, metric, reportAllChanges);\n\n    onHidden(() => {\n      po.takeRecords().map(entryHandler as PerformanceEntryHandler);\n      report(true);\n    });\n  }\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,YAAY,QAAQ,oBAAoB;AACjD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,OAAO,QAAiC,eAAe;AAChE,SAASC,QAAQ,QAAQ,gBAAgB;AAiBzC,OAAO,IAAMC,MAAM,GAAG,SAAAA,CAACC,QAAuB,EAAEC,gBAA0B;EACxE,IAAMC,MAAM,GAAGN,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;EACnC,IAAIO,MAAuC;EAE3C,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAIC,cAAc,GAAuB,EAAE;EAE3C,IAAMC,YAAY,GAAG,SAAAA,CAACC,KAAkB;IACtC;IACA;IACA,IAAIA,KAAK,IAAI,CAACA,KAAK,CAACC,cAAc,EAAE;MAClC,IAAMC,iBAAiB,GAAGJ,cAAc,CAAC,CAAC,CAAC;MAC3C,IAAMK,gBAAgB,GAAGL,cAAc,CAACA,cAAc,CAACM,MAAM,GAAG,CAAC,CAAC;MAElE;MACA;MACA;MACA,IACEP,YAAY,IACZC,cAAc,CAACM,MAAM,KAAK,CAAC,IAC3BJ,KAAK,CAACK,SAAS,GAAGF,gBAAgB,CAACE,SAAS,GAAG,IAAI,IACnDL,KAAK,CAACK,SAAS,GAAGH,iBAAiB,CAACG,SAAS,GAAG,IAAI,EACpD;QACAR,YAAY,IAAIG,KAAK,CAACM,KAAK;QAC3BR,cAAc,CAACS,IAAI,CAACP,KAAK,CAAC;OAC3B,MAAM;QACLH,YAAY,GAAGG,KAAK,CAACM,KAAK;QAC1BR,cAAc,GAAG,CAACE,KAAK,CAAC;;MAG1B;MACA;MACA,IAAIH,YAAY,GAAGF,MAAM,CAACW,KAAK,EAAE;QAC/BX,MAAM,CAACW,KAAK,GAAGT,YAAY;QAC3BF,MAAM,CAACa,OAAO,GAAGV,cAAc;QAC/B,IAAIF,MAAM,EAAE;UACVA,MAAM,EAAE;;;;EAIhB,CAAC;EAED,IAAMa,EAAE,GAAGnB,OAAO,CAAC,cAAc,EAAES,YAAuC,CAAC;EAC3E,IAAIU,EAAE,EAAE;IACNb,MAAM,GAAGR,YAAY,CAACK,QAAQ,EAAEE,MAAM,EAAED,gBAAgB,CAAC;IAEzDH,QAAQ,CAAC;MACPkB,EAAE,CAACC,WAAW,EAAE,CAACC,GAAG,CAACZ,YAAuC,CAAC;MAC7DH,MAAM,CAAC,IAAI,CAAC;IACd,CAAC,CAAC;;AAEN,CAAC"},"metadata":{},"sourceType":"module"}