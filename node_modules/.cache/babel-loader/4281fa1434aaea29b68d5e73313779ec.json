{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addInstrumentationHandler, getEventDescription, getGlobalObject, htmlTreeAsString, parseUrl, safeJoin, severityFromString } from '@sentry/utils';\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nvar Breadcrumbs = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Breadcrumbs(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = Breadcrumbs.id;\n    this._options = __assign({\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true\n    }, options);\n  }\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  Breadcrumbs.prototype.addSentryBreadcrumb = function (event) {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"sentry.\" + (event.type === 'transaction' ? 'transaction' : 'event'),\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event: event\n    });\n  };\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  Breadcrumbs.prototype.setupOnce = function () {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  Breadcrumbs.id = 'Breadcrumbs';\n  return Breadcrumbs;\n}();\nexport { Breadcrumbs };\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData) {\n    var target;\n    var keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target ? htmlTreeAsString(handlerData.event.target, keyAttrs) : htmlTreeAsString(handlerData.event, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb({\n      category: \"ui.\" + handlerData.name,\n      message: target\n    }, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  }\n  return _innerDomBreadcrumb;\n}\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData) {\n  var breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console'\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' ')\n  };\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = \"Assertion failed: \" + (safeJoin(handlerData.args.slice(1), ' ') || 'console.assert');\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level\n  });\n}\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData) {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n    var _a = handlerData.xhr.__sentry_xhr__ || {},\n      method = _a.method,\n      url = _a.url,\n      status_code = _a.status_code,\n      body = _a.body;\n    getCurrentHub().addBreadcrumb({\n      category: 'xhr',\n      data: {\n        method: method,\n        url: url,\n        status_code: status_code\n      },\n      type: 'http'\n    }, {\n      xhr: handlerData.xhr,\n      input: body\n    });\n    return;\n  }\n}\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData) {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: handlerData.fetchData,\n      level: Severity.Error,\n      type: 'http'\n    }, {\n      data: handlerData.error,\n      input: handlerData.args\n    });\n  } else {\n    getCurrentHub().addBreadcrumb({\n      category: 'fetch',\n      data: __assign(__assign({}, handlerData.fetchData), {\n        status_code: handlerData.response.status\n      }),\n      type: 'http'\n    }, {\n      input: handlerData.args,\n      response: handlerData.response\n    });\n  }\n}\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData) {\n  var global = getGlobalObject();\n  var from = handlerData.from;\n  var to = handlerData.to;\n  var parsedLoc = parseUrl(global.location.href);\n  var parsedFrom = parseUrl(from);\n  var parsedTo = parseUrl(to);\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from: from,\n      to: to\n    }\n  });\n}","map":{"version":3,"names":["getCurrentHub","Severity","addInstrumentationHandler","getEventDescription","getGlobalObject","htmlTreeAsString","parseUrl","safeJoin","severityFromString","Breadcrumbs","options","name","id","_options","__assign","console","dom","fetch","history","sentry","xhr","prototype","addSentryBreadcrumb","event","addBreadcrumb","category","type","event_id","level","message","setupOnce","_consoleBreadcrumb","_domBreadcrumb","_xhrBreadcrumb","_fetchBreadcrumb","_historyBreadcrumb","_innerDomBreadcrumb","handlerData","target","keyAttrs","serializeAttribute","undefined","e","length","global","breadcrumb","data","arguments","args","logger","slice","input","endTimestamp","__sentry_own_request__","_a","__sentry_xhr__","method","url","status_code","body","fetchData","match","error","Error","response","status","from","to","parsedLoc","location","href","parsedFrom","parsedTo","path","protocol","host","relative"],"sources":["../../../../src/integrations/breadcrumbs.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable max-lines */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, Integration, Severity } from '@sentry/types';\nimport {\n  addInstrumentationHandler,\n  getEventDescription,\n  getGlobalObject,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityFromString,\n} from '@sentry/utils';\n\n/** JSDoc */\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom: boolean | { serializeAttribute: string | string[] };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/**\n * Default Breadcrumbs instrumentations\n * TODO: Deprecated - with v6, this will be renamed to `Instrument`\n */\nexport class Breadcrumbs implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Breadcrumbs';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Breadcrumbs.id;\n\n  /** JSDoc */\n  private readonly _options: BreadcrumbsOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options?: Partial<BreadcrumbsOptions>) {\n    this._options = {\n      console: true,\n      dom: true,\n      fetch: true,\n      history: true,\n      sentry: true,\n      xhr: true,\n      ...options,\n    };\n  }\n\n  /**\n   * Create a breadcrumb of `sentry` from the events themselves\n   */\n  public addSentryBreadcrumb(event: Event): void {\n    if (!this._options.sentry) {\n      return;\n    }\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  }\n\n  /**\n   * Instrument browser built-ins w/ breadcrumb capturing\n   *  - Console API\n   *  - DOM API (click/typing)\n   *  - XMLHttpRequest API\n   *  - Fetch API\n   *  - History API\n   */\n  public setupOnce(): void {\n    if (this._options.console) {\n      addInstrumentationHandler('console', _consoleBreadcrumb);\n    }\n    if (this._options.dom) {\n      addInstrumentationHandler('dom', _domBreadcrumb(this._options.dom));\n    }\n    if (this._options.xhr) {\n      addInstrumentationHandler('xhr', _xhrBreadcrumb);\n    }\n    if (this._options.fetch) {\n      addInstrumentationHandler('fetch', _fetchBreadcrumb);\n    }\n    if (this._options.history) {\n      addInstrumentationHandler('history', _historyBreadcrumb);\n    }\n  }\n}\n\n/**\n * A HOC that creaes a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _domBreadcrumb(dom: BreadcrumbsOptions['dom']): (handlerData: { [key: string]: any }) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function _innerDomBreadcrumb(handlerData: { [key: string]: any }): void {\n    let target;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      target = handlerData.event.target\n        ? htmlTreeAsString(handlerData.event.target as Node, keyAttrs)\n        : htmlTreeAsString(handlerData.event as unknown as Node, keyAttrs);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: `ui.${handlerData.name}`,\n        message: target,\n      },\n      {\n        event: handlerData.event,\n        name: handlerData.name,\n        global: handlerData.global,\n      },\n    );\n  }\n\n  return _innerDomBreadcrumb;\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _consoleBreadcrumb(handlerData: { [key: string]: any }): void {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: handlerData.args,\n      logger: 'console',\n    },\n    level: severityFromString(handlerData.level),\n    message: safeJoin(handlerData.args, ' '),\n  };\n\n  if (handlerData.level === 'assert') {\n    if (handlerData.args[0] === false) {\n      breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n      breadcrumb.data.arguments = handlerData.args.slice(1);\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n\n  getCurrentHub().addBreadcrumb(breadcrumb, {\n    input: handlerData.args,\n    level: handlerData.level,\n  });\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _xhrBreadcrumb(handlerData: { [key: string]: any }): void {\n  if (handlerData.endTimestamp) {\n    // We only capture complete, non-sentry requests\n    if (handlerData.xhr.__sentry_own_request__) {\n      return;\n    }\n\n    const { method, url, status_code, body } = handlerData.xhr.__sentry_xhr__ || {};\n\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'xhr',\n        data: {\n          method,\n          url,\n          status_code,\n        },\n        type: 'http',\n      },\n      {\n        xhr: handlerData.xhr,\n        input: body,\n      },\n    );\n\n    return;\n  }\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _fetchBreadcrumb(handlerData: { [key: string]: any }): void {\n  // We only capture complete fetch requests\n  if (!handlerData.endTimestamp) {\n    return;\n  }\n\n  if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n    // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n    return;\n  }\n\n  if (handlerData.error) {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: handlerData.fetchData,\n        level: Severity.Error,\n        type: 'http',\n      },\n      {\n        data: handlerData.error,\n        input: handlerData.args,\n      },\n    );\n  } else {\n    getCurrentHub().addBreadcrumb(\n      {\n        category: 'fetch',\n        data: {\n          ...handlerData.fetchData,\n          status_code: handlerData.response.status,\n        },\n        type: 'http',\n      },\n      {\n        input: handlerData.args,\n        response: handlerData.response,\n      },\n    );\n  }\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _historyBreadcrumb(handlerData: { [key: string]: any }): void {\n  const global = getGlobalObject<Window>();\n  let from = handlerData.from;\n  let to = handlerData.to;\n  const parsedLoc = parseUrl(global.location.href);\n  let parsedFrom = parseUrl(from);\n  const parsedTo = parseUrl(to);\n\n  // Initial pushState doesn't provide `from` information\n  if (!parsedFrom.path) {\n    parsedFrom = parsedLoc;\n  }\n\n  // Use only the path component of the URL if the URL matches the current\n  // document (almost all the time when using pushState)\n  if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n    to = parsedTo.relative;\n  }\n  if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n    from = parsedFrom.relative;\n  }\n\n  getCurrentHub().addBreadcrumb({\n    category: 'navigation',\n    data: {\n      from,\n      to,\n    },\n  });\n}\n"],"mappings":";AAAA;AACA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAA6BC,QAAQ,QAAQ,eAAe;AAC5D,SACEC,yBAAyB,EACzBC,mBAAmB,EACnBC,eAAe,EACfC,gBAAgB,EAChBC,QAAQ,EACRC,QAAQ,EACRC,kBAAkB,QACb,eAAe;AAYtB;;;;AAIA,IAAAC,WAAA;EAcE;;;EAGA,SAAAA,YAAmBC,OAAqC;IAXxD;;;IAGO,KAAAC,IAAI,GAAWF,WAAW,CAACG,EAAE;IASlC,IAAI,CAACC,QAAQ,GAAAC,QAAA;MACXC,OAAO,EAAE,IAAI;MACbC,GAAG,EAAE,IAAI;MACTC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,IAAI;MACbC,MAAM,EAAE,IAAI;MACZC,GAAG,EAAE;IAAI,GACNV,OAAO,CACX;EACH;EAEA;;;EAGOD,WAAA,CAAAY,SAAA,CAAAC,mBAAmB,GAA1B,UAA2BC,KAAY;IACrC,IAAI,CAAC,IAAI,CAACV,QAAQ,CAACM,MAAM,EAAE;MACzB;;IAEFnB,aAAa,EAAE,CAACwB,aAAa,CAC3B;MACEC,QAAQ,EAAE,aAAUF,KAAK,CAACG,IAAI,KAAK,aAAa,GAAG,aAAa,GAAG,OAAO,CAAE;MAC5EC,QAAQ,EAAEJ,KAAK,CAACI,QAAQ;MACxBC,KAAK,EAAEL,KAAK,CAACK,KAAK;MAClBC,OAAO,EAAE1B,mBAAmB,CAACoB,KAAK;KACnC,EACD;MACEA,KAAK,EAAAA;KACN,CACF;EACH,CAAC;EAED;;;;;;;;EAQOd,WAAA,CAAAY,SAAA,CAAAS,SAAS,GAAhB;IACE,IAAI,IAAI,CAACjB,QAAQ,CAACE,OAAO,EAAE;MACzBb,yBAAyB,CAAC,SAAS,EAAE6B,kBAAkB,CAAC;;IAE1D,IAAI,IAAI,CAAClB,QAAQ,CAACG,GAAG,EAAE;MACrBd,yBAAyB,CAAC,KAAK,EAAE8B,cAAc,CAAC,IAAI,CAACnB,QAAQ,CAACG,GAAG,CAAC,CAAC;;IAErE,IAAI,IAAI,CAACH,QAAQ,CAACO,GAAG,EAAE;MACrBlB,yBAAyB,CAAC,KAAK,EAAE+B,cAAc,CAAC;;IAElD,IAAI,IAAI,CAACpB,QAAQ,CAACI,KAAK,EAAE;MACvBf,yBAAyB,CAAC,OAAO,EAAEgC,gBAAgB,CAAC;;IAEtD,IAAI,IAAI,CAACrB,QAAQ,CAACK,OAAO,EAAE;MACzBhB,yBAAyB,CAAC,SAAS,EAAEiC,kBAAkB,CAAC;;EAE5D,CAAC;EAxED;;;EAGc1B,WAAA,CAAAG,EAAE,GAAW,aAAa;EAsE1C,OAAAH,WAAC;CAAA,CA1ED;SAAaA,WAAW;AA4ExB;;;;AAIA;AACA,SAASuB,cAAcA,CAAChB,GAA8B;EACpD;EACA,SAASoB,mBAAmBA,CAACC,WAAmC;IAC9D,IAAIC,MAAM;IACV,IAAIC,QAAQ,GAAG,OAAOvB,GAAG,KAAK,QAAQ,GAAGA,GAAG,CAACwB,kBAAkB,GAAGC,SAAS;IAE3E,IAAI,OAAOF,QAAQ,KAAK,QAAQ,EAAE;MAChCA,QAAQ,GAAG,CAACA,QAAQ,CAAC;;IAGvB;IACA,IAAI;MACFD,MAAM,GAAGD,WAAW,CAACd,KAAK,CAACe,MAAM,GAC7BjC,gBAAgB,CAACgC,WAAW,CAACd,KAAK,CAACe,MAAc,EAAEC,QAAQ,CAAC,GAC5DlC,gBAAgB,CAACgC,WAAW,CAACd,KAAwB,EAAEgB,QAAQ,CAAC;KACrE,CAAC,OAAOG,CAAC,EAAE;MACVJ,MAAM,GAAG,WAAW;;IAGtB,IAAIA,MAAM,CAACK,MAAM,KAAK,CAAC,EAAE;MACvB;;IAGF3C,aAAa,EAAE,CAACwB,aAAa,CAC3B;MACEC,QAAQ,EAAE,QAAMY,WAAW,CAAC1B,IAAM;MAClCkB,OAAO,EAAES;KACV,EACD;MACEf,KAAK,EAAEc,WAAW,CAACd,KAAK;MACxBZ,IAAI,EAAE0B,WAAW,CAAC1B,IAAI;MACtBiC,MAAM,EAAEP,WAAW,CAACO;KACrB,CACF;EACH;EAEA,OAAOR,mBAAmB;AAC5B;AAEA;;;AAGA;AACA,SAASL,kBAAkBA,CAACM,WAAmC;EAC7D,IAAMQ,UAAU,GAAG;IACjBpB,QAAQ,EAAE,SAAS;IACnBqB,IAAI,EAAE;MACJC,SAAS,EAAEV,WAAW,CAACW,IAAI;MAC3BC,MAAM,EAAE;KACT;IACDrB,KAAK,EAAEpB,kBAAkB,CAAC6B,WAAW,CAACT,KAAK,CAAC;IAC5CC,OAAO,EAAEtB,QAAQ,CAAC8B,WAAW,CAACW,IAAI,EAAE,GAAG;GACxC;EAED,IAAIX,WAAW,CAACT,KAAK,KAAK,QAAQ,EAAE;IAClC,IAAIS,WAAW,CAACW,IAAI,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE;MACjCH,UAAU,CAAChB,OAAO,GAAG,wBAAqBtB,QAAQ,CAAC8B,WAAW,CAACW,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,gBAAgB,CAAE;MACxGL,UAAU,CAACC,IAAI,CAACC,SAAS,GAAGV,WAAW,CAACW,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;KACtD,MAAM;MACL;MACA;;;EAIJlD,aAAa,EAAE,CAACwB,aAAa,CAACqB,UAAU,EAAE;IACxCM,KAAK,EAAEd,WAAW,CAACW,IAAI;IACvBpB,KAAK,EAAES,WAAW,CAACT;GACpB,CAAC;AACJ;AAEA;;;AAGA;AACA,SAASK,cAAcA,CAACI,WAAmC;EACzD,IAAIA,WAAW,CAACe,YAAY,EAAE;IAC5B;IACA,IAAIf,WAAW,CAACjB,GAAG,CAACiC,sBAAsB,EAAE;MAC1C;;IAGI,IAAAC,EAAA,GAAAjB,WAAA,CAAAjB,GAAA,CAAAmC,cAAA,MAAyE;MAAvEC,MAAA,GAAAF,EAAA,CAAAE,MAAM;MAAEC,GAAA,GAAAH,EAAA,CAAAG,GAAG;MAAEC,WAAA,GAAAJ,EAAA,CAAAI,WAAW;MAAEC,IAAA,GAAAL,EAAA,CAAAK,IAA6C;IAE/E3D,aAAa,EAAE,CAACwB,aAAa,CAC3B;MACEC,QAAQ,EAAE,KAAK;MACfqB,IAAI,EAAE;QACJU,MAAM,EAAAA,MAAA;QACNC,GAAG,EAAAA,GAAA;QACHC,WAAW,EAAAA;OACZ;MACDhC,IAAI,EAAE;KACP,EACD;MACEN,GAAG,EAAEiB,WAAW,CAACjB,GAAG;MACpB+B,KAAK,EAAEQ;KACR,CACF;IAED;;AAEJ;AAEA;;;AAGA;AACA,SAASzB,gBAAgBA,CAACG,WAAmC;EAC3D;EACA,IAAI,CAACA,WAAW,CAACe,YAAY,EAAE;IAC7B;;EAGF,IAAIf,WAAW,CAACuB,SAAS,CAACH,GAAG,CAACI,KAAK,CAAC,YAAY,CAAC,IAAIxB,WAAW,CAACuB,SAAS,CAACJ,MAAM,KAAK,MAAM,EAAE;IAC5F;IACA;;EAGF,IAAInB,WAAW,CAACyB,KAAK,EAAE;IACrB9D,aAAa,EAAE,CAACwB,aAAa,CAC3B;MACEC,QAAQ,EAAE,OAAO;MACjBqB,IAAI,EAAET,WAAW,CAACuB,SAAS;MAC3BhC,KAAK,EAAE3B,QAAQ,CAAC8D,KAAK;MACrBrC,IAAI,EAAE;KACP,EACD;MACEoB,IAAI,EAAET,WAAW,CAACyB,KAAK;MACvBX,KAAK,EAAEd,WAAW,CAACW;KACpB,CACF;GACF,MAAM;IACLhD,aAAa,EAAE,CAACwB,aAAa,CAC3B;MACEC,QAAQ,EAAE,OAAO;MACjBqB,IAAI,EAAAhC,QAAA,CAAAA,QAAA,KACCuB,WAAW,CAACuB,SAAS;QACxBF,WAAW,EAAErB,WAAW,CAAC2B,QAAQ,CAACC;MAAM,EACzC;MACDvC,IAAI,EAAE;KACP,EACD;MACEyB,KAAK,EAAEd,WAAW,CAACW,IAAI;MACvBgB,QAAQ,EAAE3B,WAAW,CAAC2B;KACvB,CACF;;AAEL;AAEA;;;AAGA;AACA,SAAS7B,kBAAkBA,CAACE,WAAmC;EAC7D,IAAMO,MAAM,GAAGxC,eAAe,EAAU;EACxC,IAAI8D,IAAI,GAAG7B,WAAW,CAAC6B,IAAI;EAC3B,IAAIC,EAAE,GAAG9B,WAAW,CAAC8B,EAAE;EACvB,IAAMC,SAAS,GAAG9D,QAAQ,CAACsC,MAAM,CAACyB,QAAQ,CAACC,IAAI,CAAC;EAChD,IAAIC,UAAU,GAAGjE,QAAQ,CAAC4D,IAAI,CAAC;EAC/B,IAAMM,QAAQ,GAAGlE,QAAQ,CAAC6D,EAAE,CAAC;EAE7B;EACA,IAAI,CAACI,UAAU,CAACE,IAAI,EAAE;IACpBF,UAAU,GAAGH,SAAS;;EAGxB;EACA;EACA,IAAIA,SAAS,CAACM,QAAQ,KAAKF,QAAQ,CAACE,QAAQ,IAAIN,SAAS,CAACO,IAAI,KAAKH,QAAQ,CAACG,IAAI,EAAE;IAChFR,EAAE,GAAGK,QAAQ,CAACI,QAAQ;;EAExB,IAAIR,SAAS,CAACM,QAAQ,KAAKH,UAAU,CAACG,QAAQ,IAAIN,SAAS,CAACO,IAAI,KAAKJ,UAAU,CAACI,IAAI,EAAE;IACpFT,IAAI,GAAGK,UAAU,CAACK,QAAQ;;EAG5B5E,aAAa,EAAE,CAACwB,aAAa,CAAC;IAC5BC,QAAQ,EAAE,YAAY;IACtBqB,IAAI,EAAE;MACJoB,IAAI,EAAAA,IAAA;MACJC,EAAE,EAAAA;;GAEL,CAAC;AACJ"},"metadata":{},"sourceType":"module"}