{"ast":null,"code":"import { __assign, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Severity } from '@sentry/types';\nimport { addExceptionMechanism, addInstrumentationHandler, getLocationHref, isErrorEvent, isPrimitive, isString, logger } from '@sentry/utils';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n/** Global handlers */\nvar GlobalHandlers = /** @class */function () {\n  /** JSDoc */\n  function GlobalHandlers(options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = GlobalHandlers.id;\n    /**\n     * Stores references functions to installing handlers. Will set to undefined\n     * after they have been run so that they are not used twice.\n     */\n    this._installFunc = {\n      onerror: _installGlobalOnErrorHandler,\n      onunhandledrejection: _installGlobalOnUnhandledRejectionHandler\n    };\n    this._options = __assign({\n      onerror: true,\n      onunhandledrejection: true\n    }, options);\n  }\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.prototype.setupOnce = function () {\n    Error.stackTraceLimit = 50;\n    var options = this._options;\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (var key in options) {\n      var installFunc = this._installFunc[key];\n      if (installFunc && options[key]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key] = undefined;\n      }\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  GlobalHandlers.id = 'GlobalHandlers';\n  return GlobalHandlers;\n}();\nexport { GlobalHandlers };\n/** JSDoc */\nfunction _installGlobalOnErrorHandler() {\n  addInstrumentationHandler('error',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (data) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n      hub = _a[0],\n      attachStacktrace = _a[1];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var msg = data.msg,\n      url = data.url,\n      line = data.line,\n      column = data.column,\n      error = data.error;\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return;\n    }\n    var event = error === undefined && isString(msg) ? _eventFromIncompleteOnError(msg, url, line, column) : _enhanceEventWithInitialFrame(eventFromUnknownInput(error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onerror');\n  });\n}\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler() {\n  addInstrumentationHandler('unhandledrejection',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function (e) {\n    var _a = __read(getHubAndAttachStacktrace(), 2),\n      hub = _a[0],\n      attachStacktrace = _a[1];\n    if (!hub.getIntegration(GlobalHandlers)) {\n      return;\n    }\n    var error = e;\n    // dig the object of the rejection out of known event types\n    try {\n      // PromiseRejectionEvents store the object of the rejection under 'reason'\n      // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n      if ('reason' in e) {\n        error = e.reason;\n      }\n      // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n      // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n      // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n      // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n      // https://github.com/getsentry/sentry-javascript/issues/2380\n      else if ('detail' in e && 'reason' in e.detail) {\n        error = e.detail.reason;\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    if (shouldIgnoreOnError() || error && error.__sentry_own_request__) {\n      return true;\n    }\n    var event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n    event.level = Severity.Error;\n    addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n    return;\n  });\n}\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: \"Non-Error promise rejection captured with value: \" + String(reason)\n      }]\n    }\n  };\n}\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg, url, line, column) {\n  var ERROR_TYPES_RE = /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n  // If 'message' is ErrorEvent, get real message from inside\n  var message = isErrorEvent(msg) ? msg.message : msg;\n  var name = 'Error';\n  var groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n  var event = {\n    exception: {\n      values: [{\n        type: name,\n        value: message\n      }]\n    }\n  };\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  var e = event.exception = event.exception || {};\n  // event.exception.values\n  var ev = e.values = e.values || [];\n  // event.exception.values[0]\n  var ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  var ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  var ev0sf = ev0s.frames = ev0s.frames || [];\n  var colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  var lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  var filename = isString(url) && url.length > 0 ? url : getLocationHref();\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno: colno,\n      filename: filename,\n      function: '?',\n      in_app: true,\n      lineno: lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  IS_DEBUG_BUILD && logger.log(\"Global Handler attached: \" + type);\n}\nfunction addMechanismAndCapture(hub, error, event, type) {\n  addExceptionMechanism(event, {\n    handled: false,\n    type: type\n  });\n  hub.captureEvent(event, {\n    originalException: error\n  });\n}\nfunction getHubAndAttachStacktrace() {\n  var hub = getCurrentHub();\n  var client = hub.getClient();\n  var attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}","map":{"version":3,"names":["getCurrentHub","Severity","addExceptionMechanism","addInstrumentationHandler","getLocationHref","isErrorEvent","isPrimitive","isString","logger","eventFromUnknownInput","IS_DEBUG_BUILD","shouldIgnoreOnError","GlobalHandlers","options","name","id","_installFunc","onerror","_installGlobalOnErrorHandler","onunhandledrejection","_installGlobalOnUnhandledRejectionHandler","_options","__assign","prototype","setupOnce","Error","stackTraceLimit","key","installFunc","globalHandlerLog","undefined","data","_a","__read","getHubAndAttachStacktrace","hub","attachStacktrace","getIntegration","msg","url","line","column","error","__sentry_own_request__","event","_eventFromIncompleteOnError","_enhanceEventWithInitialFrame","level","addMechanismAndCapture","e","reason","detail","_oO","_eventFromRejectionWithPrimitive","exception","values","type","value","String","ERROR_TYPES_RE","message","groups","match","ev","ev0","ev0s","stacktrace","ev0sf","frames","colno","isNaN","parseInt","lineno","filename","length","push","function","in_app","log","handled","captureEvent","originalException","client","getClient","getOptions"],"sources":["../../../../src/integrations/globalhandlers.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\nimport { getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Hub, Integration, Primitive, Severity } from '@sentry/types';\nimport {\n  addExceptionMechanism,\n  addInstrumentationHandler,\n  getLocationHref,\n  isErrorEvent,\n  isPrimitive,\n  isString,\n  logger,\n} from '@sentry/utils';\n\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { IS_DEBUG_BUILD } from '../flags';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\n/** JSDoc */\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\n/** Global handlers */\nexport class GlobalHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'GlobalHandlers';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = GlobalHandlers.id;\n\n  /** JSDoc */\n  private readonly _options: GlobalHandlersIntegrations;\n\n  /**\n   * Stores references functions to installing handlers. Will set to undefined\n   * after they have been run so that they are not used twice.\n   */\n  private _installFunc: Record<GlobalHandlersIntegrationsOptionKeys, (() => void) | undefined> = {\n    onerror: _installGlobalOnErrorHandler,\n    onunhandledrejection: _installGlobalOnUnhandledRejectionHandler,\n  };\n\n  /** JSDoc */\n  public constructor(options?: GlobalHandlersIntegrations) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options,\n    };\n  }\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    Error.stackTraceLimit = 50;\n    const options = this._options;\n\n    // We can disable guard-for-in as we construct the options object above + do checks against\n    // `this._installFunc` for the property.\n    // eslint-disable-next-line guard-for-in\n    for (const key in options) {\n      const installFunc = this._installFunc[key as GlobalHandlersIntegrationsOptionKeys];\n      if (installFunc && options[key as GlobalHandlersIntegrationsOptionKeys]) {\n        globalHandlerLog(key);\n        installFunc();\n        this._installFunc[key as GlobalHandlersIntegrationsOptionKeys] = undefined;\n      }\n    }\n  }\n}\n\n/** JSDoc */\nfunction _installGlobalOnErrorHandler(): void {\n  addInstrumentationHandler(\n    'error',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (data: { msg: any; url: any; line: any; column: any; error: any }) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      const { msg, url, line, column, error } = data;\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return;\n      }\n\n      const event =\n        error === undefined && isString(msg)\n          ? _eventFromIncompleteOnError(msg, url, line, column)\n          : _enhanceEventWithInitialFrame(\n              eventFromUnknownInput(error || msg, undefined, attachStacktrace, false),\n              url,\n              line,\n              column,\n            );\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onerror');\n    },\n  );\n}\n\n/** JSDoc */\nfunction _installGlobalOnUnhandledRejectionHandler(): void {\n  addInstrumentationHandler(\n    'unhandledrejection',\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (e: any) => {\n      const [hub, attachStacktrace] = getHubAndAttachStacktrace();\n      if (!hub.getIntegration(GlobalHandlers)) {\n        return;\n      }\n      let error = e;\n\n      // dig the object of the rejection out of known event types\n      try {\n        // PromiseRejectionEvents store the object of the rejection under 'reason'\n        // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n        if ('reason' in e) {\n          error = e.reason;\n        }\n        // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n        // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n        // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n        // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n        // https://github.com/getsentry/sentry-javascript/issues/2380\n        else if ('detail' in e && 'reason' in e.detail) {\n          error = e.detail.reason;\n        }\n      } catch (_oO) {\n        // no-empty\n      }\n\n      if (shouldIgnoreOnError() || (error && error.__sentry_own_request__)) {\n        return true;\n      }\n\n      const event = isPrimitive(error)\n        ? _eventFromRejectionWithPrimitive(error)\n        : eventFromUnknownInput(error, undefined, attachStacktrace, true);\n\n      event.level = Severity.Error;\n\n      addMechanismAndCapture(hub, error, event, 'onunhandledrejection');\n      return;\n    },\n  );\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\n/**\n * This function creates a stack from an old, error-less onerror handler.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _eventFromIncompleteOnError(msg: any, url: any, line: any, column: any): Event {\n  const ERROR_TYPES_RE =\n    /^(?:[Uu]ncaught (?:exception: )?)?(?:((?:Eval|Internal|Range|Reference|Syntax|Type|URI|)Error): )?(.*)$/i;\n\n  // If 'message' is ErrorEvent, get real message from inside\n  let message = isErrorEvent(msg) ? msg.message : msg;\n  let name = 'Error';\n\n  const groups = message.match(ERROR_TYPES_RE);\n  if (groups) {\n    name = groups[1];\n    message = groups[2];\n  }\n\n  const event = {\n    exception: {\n      values: [\n        {\n          type: name,\n          value: message,\n        },\n      ],\n    },\n  };\n\n  return _enhanceEventWithInitialFrame(event, url, line, column);\n}\n\n/** JSDoc */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _enhanceEventWithInitialFrame(event: Event, url: any, line: any, column: any): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = isNaN(parseInt(column, 10)) ? undefined : column;\n  const lineno = isNaN(parseInt(line, 10)) ? undefined : line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: '?',\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  IS_DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction addMechanismAndCapture(hub: Hub, error: EventHint['originalException'], event: Event, type: string): void {\n  addExceptionMechanism(event, {\n    handled: false,\n    type,\n  });\n  hub.captureEvent(event, {\n    originalException: error,\n  });\n}\n\nfunction getHubAndAttachStacktrace(): [Hub, boolean | undefined] {\n  const hub = getCurrentHub();\n  const client = hub.getClient();\n  const attachStacktrace = client && client.getOptions().attachStacktrace;\n  return [hub, attachStacktrace];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}