{"ast":null,"code":"import { createTransport } from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nvar XHR_READYSTATE_DONE = 4;\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeNewXHRTransport(options) {\n  function makeRequest(request) {\n    return new SyncPromise(function (resolve, _reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          var response = {\n            body: xhr.response,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After')\n            },\n            reason: xhr.statusText,\n            statusCode: xhr.status\n          };\n          resolve(response);\n        }\n      };\n      xhr.open('POST', options.url);\n      for (var header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n      xhr.send(request.body);\n    });\n  }\n  return createTransport({\n    bufferSize: options.bufferSize\n  }, makeRequest);\n}","map":{"version":3,"names":["createTransport","SyncPromise","XHR_READYSTATE_DONE","makeNewXHRTransport","options","makeRequest","request","resolve","_reject","xhr","XMLHttpRequest","onreadystatechange","readyState","response","body","headers","getResponseHeader","reason","statusText","statusCode","status","open","url","header","Object","prototype","hasOwnProperty","call","setRequestHeader","send","bufferSize"],"sources":["../../../../src/transports/new-xhr.ts"],"sourcesContent":["import {\n  BaseTransportOptions,\n  createTransport,\n  NewTransport,\n  TransportMakeRequestResponse,\n  TransportRequest,\n} from '@sentry/core';\nimport { SyncPromise } from '@sentry/utils';\n\n/**\n * The DONE ready state for XmlHttpRequest\n *\n * Defining it here as a constant b/c XMLHttpRequest.DONE is not always defined\n * (e.g. during testing, it is `undefined`)\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState}\n */\nconst XHR_READYSTATE_DONE = 4;\n\nexport interface XHRTransportOptions extends BaseTransportOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Creates a Transport that uses the XMLHttpRequest API to send events to Sentry.\n */\nexport function makeNewXHRTransport(options: XHRTransportOptions): NewTransport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    return new SyncPromise<TransportMakeRequestResponse>((resolve, _reject) => {\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = (): void => {\n        if (xhr.readyState === XHR_READYSTATE_DONE) {\n          const response = {\n            body: xhr.response,\n            headers: {\n              'x-sentry-rate-limits': xhr.getResponseHeader('X-Sentry-Rate-Limits'),\n              'retry-after': xhr.getResponseHeader('Retry-After'),\n            },\n            reason: xhr.statusText,\n            statusCode: xhr.status,\n          };\n          resolve(response);\n        }\n      };\n\n      xhr.open('POST', options.url);\n\n      for (const header in options.headers) {\n        if (Object.prototype.hasOwnProperty.call(options.headers, header)) {\n          xhr.setRequestHeader(header, options.headers[header]);\n        }\n      }\n\n      xhr.send(request.body);\n    });\n  }\n\n  return createTransport({ bufferSize: options.bufferSize }, makeRequest);\n}\n"],"mappings":"AAAA,SAEEA,eAAe,QAIV,cAAc;AACrB,SAASC,WAAW,QAAQ,eAAe;AAE3C;;;;;;;;AAQA,IAAMC,mBAAmB,GAAG,CAAC;AAM7B;;;AAGA,OAAM,SAAUC,mBAAmBA,CAACC,OAA4B;EAC9D,SAASC,WAAWA,CAACC,OAAyB;IAC5C,OAAO,IAAIL,WAAW,CAA+B,UAACM,OAAO,EAAEC,OAAO;MACpE,IAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE;MAEhCD,GAAG,CAACE,kBAAkB,GAAG;QACvB,IAAIF,GAAG,CAACG,UAAU,KAAKV,mBAAmB,EAAE;UAC1C,IAAMW,QAAQ,GAAG;YACfC,IAAI,EAAEL,GAAG,CAACI,QAAQ;YAClBE,OAAO,EAAE;cACP,sBAAsB,EAAEN,GAAG,CAACO,iBAAiB,CAAC,sBAAsB,CAAC;cACrE,aAAa,EAAEP,GAAG,CAACO,iBAAiB,CAAC,aAAa;aACnD;YACDC,MAAM,EAAER,GAAG,CAACS,UAAU;YACtBC,UAAU,EAAEV,GAAG,CAACW;WACjB;UACDb,OAAO,CAACM,QAAQ,CAAC;;MAErB,CAAC;MAEDJ,GAAG,CAACY,IAAI,CAAC,MAAM,EAAEjB,OAAO,CAACkB,GAAG,CAAC;MAE7B,KAAK,IAAMC,MAAM,IAAInB,OAAO,CAACW,OAAO,EAAE;QACpC,IAAIS,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACvB,OAAO,CAACW,OAAO,EAAEQ,MAAM,CAAC,EAAE;UACjEd,GAAG,CAACmB,gBAAgB,CAACL,MAAM,EAAEnB,OAAO,CAACW,OAAO,CAACQ,MAAM,CAAC,CAAC;;;MAIzDd,GAAG,CAACoB,IAAI,CAACvB,OAAO,CAACQ,IAAI,CAAC;IACxB,CAAC,CAAC;EACJ;EAEA,OAAOd,eAAe,CAAC;IAAE8B,UAAU,EAAE1B,OAAO,CAAC0B;EAAU,CAAE,EAAEzB,WAAW,CAAC;AACzE"},"metadata":{},"sourceType":"module"}