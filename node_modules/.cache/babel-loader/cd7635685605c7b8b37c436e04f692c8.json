{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nvar SpanRecorder = /** @class */function () {\n  function SpanRecorder(maxlen) {\n    if (maxlen === void 0) {\n      maxlen = 1000;\n    }\n    this.spans = [];\n    this._maxlen = maxlen;\n  }\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  SpanRecorder.prototype.add = function (span) {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  };\n  return SpanRecorder;\n}();\nexport { SpanRecorder };\n/**\n * Span contains all data about a span\n */\nvar Span = /** @class */function () {\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  function Span(spanContext) {\n    /**\n     * @inheritDoc\n     */\n    this.traceId = uuid4();\n    /**\n     * @inheritDoc\n     */\n    this.spanId = uuid4().substring(16);\n    /**\n     * Timestamp in seconds when the span was created.\n     */\n    this.startTimestamp = timestampWithMs();\n    /**\n     * @inheritDoc\n     */\n    this.tags = {};\n    /**\n     * @inheritDoc\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.data = {};\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  Span.prototype.child = function (spanContext) {\n    return this.startChild(spanContext);\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.startChild = function (spanContext) {\n    var childSpan = new Span(__assign(__assign({}, spanContext), {\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId\n    }));\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n    childSpan.transaction = this.transaction;\n    return childSpan;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setTag = function (key, value) {\n    var _a;\n    this.tags = __assign(__assign({}, this.tags), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  Span.prototype.setData = function (key, value) {\n    var _a;\n    this.data = __assign(__assign({}, this.data), (_a = {}, _a[key] = value, _a));\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setStatus = function (value) {\n    this.status = value;\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.setHttpStatus = function (httpStatus) {\n    this.setTag('http.status_code', String(httpStatus));\n    var spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.isSuccess = function () {\n    return this.status === 'ok';\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.finish = function (endTimestamp) {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toTraceparent = function () {\n    var sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return this.traceId + \"-\" + this.spanId + sampledString;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toContext = function () {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.updateWithContext = function (spanContext) {\n    var _a, _b, _c, _d, _e;\n    this.data = (_a = spanContext.data, _a !== null && _a !== void 0 ? _a : {});\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = (_b = spanContext.spanId, _b !== null && _b !== void 0 ? _b : this.spanId);\n    this.startTimestamp = (_c = spanContext.startTimestamp, _c !== null && _c !== void 0 ? _c : this.startTimestamp);\n    this.status = spanContext.status;\n    this.tags = (_d = spanContext.tags, _d !== null && _d !== void 0 ? _d : {});\n    this.traceId = (_e = spanContext.traceId, _e !== null && _e !== void 0 ? _e : this.traceId);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.getTraceContext = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  Span.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId\n    });\n  };\n  return Span;\n}();\nexport { Span };\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n  return 'unknown_error';\n}","map":{"version":3,"names":["dropUndefinedKeys","timestampWithMs","uuid4","SpanRecorder","maxlen","spans","_maxlen","prototype","add","span","length","spanRecorder","undefined","push","Span","spanContext","traceId","spanId","substring","startTimestamp","tags","data","parentSpanId","sampled","op","description","status","endTimestamp","child","startChild","childSpan","__assign","transaction","setTag","key","value","_a","setData","setStatus","setHttpStatus","httpStatus","String","spanStatus","spanStatusfromHttpCode","isSuccess","finish","toTraceparent","sampledString","toContext","updateWithContext","_b","_c","_d","_e","getTraceContext","Object","keys","parent_span_id","span_id","trace_id","toJSON","start_timestamp","timestamp"],"sources":["../../../src/span.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { Primitive, Span as SpanInterface, SpanContext, Transaction } from '@sentry/types';\nimport { dropUndefinedKeys, timestampWithMs, uuid4 } from '@sentry/utils';\n\n/**\n * Keeps track of finished spans for a given transaction\n * @internal\n * @hideconstructor\n * @hidden\n */\nexport class SpanRecorder {\n  public spans: Span[] = [];\n\n  private readonly _maxlen: number;\n\n  public constructor(maxlen: number = 1000) {\n    this._maxlen = maxlen;\n  }\n\n  /**\n   * This is just so that we don't run out of memory while recording a lot\n   * of spans. At some point we just stop and flush out the start of the\n   * trace tree (i.e.the first n spans with the smallest\n   * start_timestamp).\n   */\n  public add(span: Span): void {\n    if (this.spans.length > this._maxlen) {\n      span.spanRecorder = undefined;\n    } else {\n      this.spans.push(span);\n    }\n  }\n}\n\n/**\n * Span contains all data about a span\n */\nexport class Span implements SpanInterface {\n  /**\n   * @inheritDoc\n   */\n  public traceId: string = uuid4();\n\n  /**\n   * @inheritDoc\n   */\n  public spanId: string = uuid4().substring(16);\n\n  /**\n   * @inheritDoc\n   */\n  public parentSpanId?: string;\n\n  /**\n   * Internal keeper of the status\n   */\n  public status?: SpanStatusType | string;\n\n  /**\n   * @inheritDoc\n   */\n  public sampled?: boolean;\n\n  /**\n   * Timestamp in seconds when the span was created.\n   */\n  public startTimestamp: number = timestampWithMs();\n\n  /**\n   * Timestamp in seconds when the span ended.\n   */\n  public endTimestamp?: number;\n\n  /**\n   * @inheritDoc\n   */\n  public op?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public description?: string;\n\n  /**\n   * @inheritDoc\n   */\n  public tags: { [key: string]: Primitive } = {};\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public data: { [key: string]: any } = {};\n\n  /**\n   * List of spans that were finalized\n   */\n  public spanRecorder?: SpanRecorder;\n\n  /**\n   * @inheritDoc\n   */\n  public transaction?: Transaction;\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startTransaction()`\n   * or call `startChild()` on an existing span.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n  public constructor(spanContext?: SpanContext) {\n    if (!spanContext) {\n      return this;\n    }\n    if (spanContext.traceId) {\n      this.traceId = spanContext.traceId;\n    }\n    if (spanContext.spanId) {\n      this.spanId = spanContext.spanId;\n    }\n    if (spanContext.parentSpanId) {\n      this.parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this.sampled = spanContext.sampled;\n    }\n    if (spanContext.op) {\n      this.op = spanContext.op;\n    }\n    if (spanContext.description) {\n      this.description = spanContext.description;\n    }\n    if (spanContext.data) {\n      this.data = spanContext.data;\n    }\n    if (spanContext.tags) {\n      this.tags = spanContext.tags;\n    }\n    if (spanContext.status) {\n      this.status = spanContext.status;\n    }\n    if (spanContext.startTimestamp) {\n      this.startTimestamp = spanContext.startTimestamp;\n    }\n    if (spanContext.endTimestamp) {\n      this.endTimestamp = spanContext.endTimestamp;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   * @deprecated\n   */\n  public child(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    return this.startChild(spanContext);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public startChild(\n    spanContext?: Pick<SpanContext, Exclude<keyof SpanContext, 'spanId' | 'sampled' | 'traceId' | 'parentSpanId'>>,\n  ): Span {\n    const childSpan = new Span({\n      ...spanContext,\n      parentSpanId: this.spanId,\n      sampled: this.sampled,\n      traceId: this.traceId,\n    });\n\n    childSpan.spanRecorder = this.spanRecorder;\n    if (childSpan.spanRecorder) {\n      childSpan.spanRecorder.add(childSpan);\n    }\n\n    childSpan.transaction = this.transaction;\n\n    return childSpan;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this.tags = { ...this.tags, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public setData(key: string, value: any): this {\n    this.data = { ...this.data, [key]: value };\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setStatus(value: SpanStatusType): this {\n    this.status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setHttpStatus(httpStatus: number): this {\n    this.setTag('http.status_code', String(httpStatus));\n    const spanStatus = spanStatusfromHttpCode(httpStatus);\n    if (spanStatus !== 'unknown_error') {\n      this.setStatus(spanStatus);\n    }\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public isSuccess(): boolean {\n    return this.status === 'ok';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public finish(endTimestamp?: number): void {\n    this.endTimestamp = typeof endTimestamp === 'number' ? endTimestamp : timestampWithMs();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toTraceparent(): string {\n    let sampledString = '';\n    if (this.sampled !== undefined) {\n      sampledString = this.sampled ? '-1' : '-0';\n    }\n    return `${this.traceId}-${this.spanId}${sampledString}`;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toContext(): SpanContext {\n    return dropUndefinedKeys({\n      data: this.data,\n      description: this.description,\n      endTimestamp: this.endTimestamp,\n      op: this.op,\n      parentSpanId: this.parentSpanId,\n      sampled: this.sampled,\n      spanId: this.spanId,\n      startTimestamp: this.startTimestamp,\n      status: this.status,\n      tags: this.tags,\n      traceId: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public updateWithContext(spanContext: SpanContext): this {\n    this.data = spanContext.data ?? {};\n    this.description = spanContext.description;\n    this.endTimestamp = spanContext.endTimestamp;\n    this.op = spanContext.op;\n    this.parentSpanId = spanContext.parentSpanId;\n    this.sampled = spanContext.sampled;\n    this.spanId = spanContext.spanId ?? this.spanId;\n    this.startTimestamp = spanContext.startTimestamp ?? this.startTimestamp;\n    this.status = spanContext.status;\n    this.tags = spanContext.tags ?? {};\n    this.traceId = spanContext.traceId ?? this.traceId;\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTraceContext(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      trace_id: this.traceId,\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public toJSON(): {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: { [key: string]: any };\n    description?: string;\n    op?: string;\n    parent_span_id?: string;\n    span_id: string;\n    start_timestamp: number;\n    status?: string;\n    tags?: { [key: string]: Primitive };\n    timestamp?: number;\n    trace_id: string;\n  } {\n    return dropUndefinedKeys({\n      data: Object.keys(this.data).length > 0 ? this.data : undefined,\n      description: this.description,\n      op: this.op,\n      parent_span_id: this.parentSpanId,\n      span_id: this.spanId,\n      start_timestamp: this.startTimestamp,\n      status: this.status,\n      tags: Object.keys(this.tags).length > 0 ? this.tags : undefined,\n      timestamp: this.endTimestamp,\n      trace_id: this.traceId,\n    });\n  }\n}\n\nexport type SpanStatusType =\n  /** The operation completed successfully. */\n  | 'ok'\n  /** Deadline expired before operation could complete. */\n  | 'deadline_exceeded'\n  /** 401 Unauthorized (actually does mean unauthenticated according to RFC 7235) */\n  | 'unauthenticated'\n  /** 403 Forbidden */\n  | 'permission_denied'\n  /** 404 Not Found. Some requested entity (file or directory) was not found. */\n  | 'not_found'\n  /** 429 Too Many Requests */\n  | 'resource_exhausted'\n  /** Client specified an invalid argument. 4xx. */\n  | 'invalid_argument'\n  /** 501 Not Implemented */\n  | 'unimplemented'\n  /** 503 Service Unavailable */\n  | 'unavailable'\n  /** Other/generic 5xx. */\n  | 'internal_error'\n  /** Unknown. Any non-standard HTTP status code. */\n  | 'unknown_error'\n  /** The operation was cancelled (typically by the user). */\n  | 'cancelled'\n  /** Already exists (409) */\n  | 'already_exists'\n  /** Operation was rejected because the system is not in a state required for the operation's */\n  | 'failed_precondition'\n  /** The operation was aborted, typically due to a concurrency issue. */\n  | 'aborted'\n  /** Operation was attempted past the valid range. */\n  | 'out_of_range'\n  /** Unrecoverable data loss or corruption */\n  | 'data_loss';\n\n/**\n * Converts a HTTP status code into a {@link SpanStatusType}.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\nexport function spanStatusfromHttpCode(httpStatus: number): SpanStatusType {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return 'ok';\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return 'unauthenticated';\n      case 403:\n        return 'permission_denied';\n      case 404:\n        return 'not_found';\n      case 409:\n        return 'already_exists';\n      case 413:\n        return 'failed_precondition';\n      case 429:\n        return 'resource_exhausted';\n      default:\n        return 'invalid_argument';\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return 'unimplemented';\n      case 503:\n        return 'unavailable';\n      case 504:\n        return 'deadline_exceeded';\n      default:\n        return 'internal_error';\n    }\n  }\n\n  return 'unknown_error';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}