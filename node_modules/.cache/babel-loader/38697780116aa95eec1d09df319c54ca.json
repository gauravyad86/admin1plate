{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject, getGlobalSingleton } from './global';\n// TODO: Implement different loggers for different environments\nvar global = getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\nexport var CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'];\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox(callback) {\n  var global = getGlobalObject();\n  if (!('console' in global)) {\n    return callback();\n  }\n  var originalConsole = global.console;\n  var wrappedLevels = {};\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(function (level) {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    var originalWrappedFunc = originalConsole[level] && originalConsole[level].__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level];\n      originalConsole[level] = originalWrappedFunc;\n    }\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(function (level) {\n      originalConsole[level] = wrappedLevels[level];\n    });\n  }\n}\nfunction makeLogger() {\n  var enabled = false;\n  var logger = {\n    enable: function () {\n      enabled = true;\n    },\n    disable: function () {\n      enabled = false;\n    }\n  };\n  if (IS_DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(function (name) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        if (enabled) {\n          consoleSandbox(function () {\n            var _a;\n            (_a = global.console)[name].apply(_a, __spread([PREFIX + \"[\" + name + \"]:\"], args));\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(function (name) {\n      logger[name] = function () {\n        return undefined;\n      };\n    });\n  }\n  return logger;\n}\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nvar logger;\nif (IS_DEBUG_BUILD) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\nexport { logger };","map":{"version":3,"names":["IS_DEBUG_BUILD","getGlobalObject","getGlobalSingleton","global","PREFIX","CONSOLE_LEVELS","consoleSandbox","callback","originalConsole","console","wrappedLevels","forEach","level","originalWrappedFunc","__sentry_original__","Object","keys","makeLogger","enabled","logger","enable","disable","name","args","_i","arguments","length","_a","apply","__spread","undefined"],"sources":["../../src/logger.ts"],"sourcesContent":["import { WrappedFunction } from '@sentry/types';\n\nimport { IS_DEBUG_BUILD } from './flags';\nimport { getGlobalObject, getGlobalSingleton } from './global';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nexport const CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert'] as const;\n\ntype LoggerMethod = (...args: unknown[]) => void;\ntype LoggerConsoleMethods = Record<typeof CONSOLE_LEVELS[number], LoggerMethod>;\n\n/** JSDoc */\ninterface Logger extends LoggerConsoleMethods {\n  disable(): void;\n  enable(): void;\n}\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  const global = getGlobalObject<Window>();\n\n  if (!('console' in global)) {\n    return callback();\n  }\n\n  const originalConsole = global.console as Console & Record<string, unknown>;\n  const wrappedLevels: Partial<LoggerConsoleMethods> = {};\n\n  // Restore all wrapped console methods\n  CONSOLE_LEVELS.forEach(level => {\n    // TODO(v7): Remove this check as it's only needed for Node 6\n    const originalWrappedFunc =\n      originalConsole[level] && (originalConsole[level] as WrappedFunction).__sentry_original__;\n    if (level in global.console && originalWrappedFunc) {\n      wrappedLevels[level] = originalConsole[level] as LoggerConsoleMethods[typeof level];\n      originalConsole[level] = originalWrappedFunc as Console[typeof level];\n    }\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    Object.keys(wrappedLevels).forEach(level => {\n      originalConsole[level] = wrappedLevels[level as typeof CONSOLE_LEVELS[number]];\n    });\n  }\n}\n\nfunction makeLogger(): Logger {\n  let enabled = false;\n  const logger: Partial<Logger> = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n  };\n\n  if (IS_DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      logger[name] = (...args: any[]) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            global.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger as Logger;\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nlet logger: Logger;\nif (IS_DEBUG_BUILD) {\n  logger = getGlobalSingleton('logger', makeLogger);\n} else {\n  logger = makeLogger();\n}\n\nexport { logger };\n"],"mappings":";AAEA,SAASA,cAAc,QAAQ,SAAS;AACxC,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,UAAU;AAE9D;AACA,IAAMC,MAAM,GAAGF,eAAe,EAA0B;AAExD;AACA,IAAMG,MAAM,GAAG,gBAAgB;AAE/B,OAAO,IAAMC,cAAc,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAU;AAW1F;;;;;;AAMA,OAAM,SAAUC,cAAcA,CAAIC,QAAiB;EACjD,IAAMJ,MAAM,GAAGF,eAAe,EAAU;EAExC,IAAI,EAAE,SAAS,IAAIE,MAAM,CAAC,EAAE;IAC1B,OAAOI,QAAQ,EAAE;;EAGnB,IAAMC,eAAe,GAAGL,MAAM,CAACM,OAA4C;EAC3E,IAAMC,aAAa,GAAkC,EAAE;EAEvD;EACAL,cAAc,CAACM,OAAO,CAAC,UAAAC,KAAK;IAC1B;IACA,IAAMC,mBAAmB,GACvBL,eAAe,CAACI,KAAK,CAAC,IAAKJ,eAAe,CAACI,KAAK,CAAqB,CAACE,mBAAmB;IAC3F,IAAIF,KAAK,IAAIT,MAAM,CAACM,OAAO,IAAII,mBAAmB,EAAE;MAClDH,aAAa,CAACE,KAAK,CAAC,GAAGJ,eAAe,CAACI,KAAK,CAAuC;MACnFJ,eAAe,CAACI,KAAK,CAAC,GAAGC,mBAA4C;;EAEzE,CAAC,CAAC;EAEF,IAAI;IACF,OAAON,QAAQ,EAAE;GAClB,SAAS;IACR;IACAQ,MAAM,CAACC,IAAI,CAACN,aAAa,CAAC,CAACC,OAAO,CAAC,UAAAC,KAAK;MACtCJ,eAAe,CAACI,KAAK,CAAC,GAAGF,aAAa,CAACE,KAAsC,CAAC;IAChF,CAAC,CAAC;;AAEN;AAEA,SAASK,UAAUA,CAAA;EACjB,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAMC,MAAM,GAAoB;IAC9BC,MAAM,EAAE,SAAAA,CAAA;MACNF,OAAO,GAAG,IAAI;IAChB,CAAC;IACDG,OAAO,EAAE,SAAAA,CAAA;MACPH,OAAO,GAAG,KAAK;IACjB;GACD;EAED,IAAIlB,cAAc,EAAE;IAClBK,cAAc,CAACM,OAAO,CAAC,UAAAW,IAAI;MACzB;MACAH,MAAM,CAACG,IAAI,CAAC,GAAG;QAAC,IAAAC,IAAA;aAAA,IAAAC,EAAA,IAAc,EAAdA,EAAA,GAAAC,SAAA,CAAAC,MAAc,EAAdF,EAAA,EAAc;UAAdD,IAAA,CAAAC,EAAA,IAAAC,SAAA,CAAAD,EAAA;;QACd,IAAIN,OAAO,EAAE;UACXZ,cAAc,CAAC;;YACb,CAAAqB,EAAA,GAAAxB,MAAM,CAACM,OAAO,EAACa,IAAI,CAAC,CAAAM,KAAA,CAAAD,EAAA,EAAAE,QAAA,EAAIzB,MAAM,SAAIkB,IAAI,OAAI,GAAKC,IAAI;UACrD,CAAC,CAAC;;MAEN,CAAC;IACH,CAAC,CAAC;GACH,MAAM;IACLlB,cAAc,CAACM,OAAO,CAAC,UAAAW,IAAI;MACzBH,MAAM,CAACG,IAAI,CAAC,GAAG;QAAM,OAAAQ,SAAS;MAAT,CAAS;IAChC,CAAC,CAAC;;EAGJ,OAAOX,MAAgB;AACzB;AAEA;AACA,IAAIA,MAAc;AAClB,IAAInB,cAAc,EAAE;EAClBmB,MAAM,GAAGjB,kBAAkB,CAAC,QAAQ,EAAEe,UAAU,CAAC;CAClD,MAAM;EACLE,MAAM,GAAGF,UAAU,EAAE;;AAGvB,SAASE,MAAM"},"metadata":{},"sourceType":"module"}