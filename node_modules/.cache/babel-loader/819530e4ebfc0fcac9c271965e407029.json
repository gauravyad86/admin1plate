{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getMainCarrier } from '@sentry/hub';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders() {\n  var scope = this.getScope();\n  if (scope) {\n    var span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent()\n      };\n    }\n  }\n  return {};\n}\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample(transaction, options, samplingContext) {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'explicitly_set'\n      }\n    });\n    return transaction;\n  }\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  var sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'inheritance'\n      }\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate)\n      }\n    });\n  }\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because \" + (typeof options.tracesSampler === 'function' ? 'tracesSampler returned 0 or false' : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'));\n    transaction.sampled = false;\n    return transaction;\n  }\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < sampleRate;\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD && logger.log(\"[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = \" + Number(sampleRate) + \")\");\n    return transaction;\n  }\n  IS_DEBUG_BUILD && logger.log(\"[Tracing] starting \" + transaction.op + \" transaction - \" + transaction.name);\n  return transaction;\n}\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate) {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got \" + JSON.stringify(rate) + \" of type \" + JSON.stringify(typeof rate) + \".\");\n    return false;\n  }\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD && logger.warn(\"[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got \" + rate + \".\");\n    return false;\n  }\n  return true;\n}\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(transactionContext, customSamplingContext) {\n  var client = this.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(hub, transactionContext, idleTimeout, onScope, customSamplingContext) {\n  var client = hub.getClient();\n  var options = client && client.getOptions() || {};\n  var transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, __assign({\n    parentSampled: transactionContext.parentSampled,\n    transactionContext: transactionContext\n  }, customSamplingContext));\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && options._experiments.maxSpans);\n  }\n  return transaction;\n}\n/**\n * @private\n */\nexport function _addTracingExtensions() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations() {\n  var carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  var packageToIntegrationMapping = {\n    mongodb: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo();\n    },\n    mongoose: function () {\n      var integration = dynamicRequire(module, './integrations/node/mongo');\n      return new integration.Mongo({\n        mongoose: true\n      });\n    },\n    mysql: function () {\n      var integration = dynamicRequire(module, './integrations/node/mysql');\n      return new integration.Mysql();\n    },\n    pg: function () {\n      var integration = dynamicRequire(module, './integrations/node/postgres');\n      return new integration.Postgres();\n    }\n  };\n  var mappedPackages = Object.keys(packageToIntegrationMapping).filter(function (moduleName) {\n    return !!loadModule(moduleName);\n  }).map(function (pkg) {\n    try {\n      return packageToIntegrationMapping[pkg]();\n    } catch (e) {\n      return undefined;\n    }\n  }).filter(function (p) {\n    return p;\n  });\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = __spread(carrier.__SENTRY__.integrations || [], mappedPackages);\n  }\n}\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods() {\n  _addTracingExtensions();\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}","map":{"version":3,"names":["getMainCarrier","dynamicRequire","isNaN","isNodeEnv","loadModule","logger","registerErrorInstrumentation","IS_DEBUG_BUILD","IdleTransaction","Transaction","hasTracingEnabled","traceHeaders","scope","getScope","span","getSpan","toTraceparent","sample","transaction","options","samplingContext","sampled","undefined","setMetadata","transactionSampling","method","sampleRate","tracesSampler","rate","Number","parentSampled","tracesSampleRate","isValidSampleRate","warn","log","Math","random","op","name","JSON","stringify","_startTransaction","transactionContext","customSamplingContext","client","getClient","getOptions","__assign","initSpanRecorder","_experiments","maxSpans","startIdleTransaction","hub","idleTimeout","onScope","_addTracingExtensions","carrier","__SENTRY__","extensions","startTransaction","_autoloadDatabaseIntegrations","packageToIntegrationMapping","mongodb","integration","module","Mongo","mongoose","mysql","Mysql","pg","Postgres","mappedPackages","Object","keys","filter","moduleName","map","pkg","e","p","length","integrations","__spread","addExtensionMethods"],"sources":["../../../src/hubextensions.ts"],"sourcesContent":["import { getMainCarrier, Hub } from '@sentry/hub';\nimport {\n  CustomSamplingContext,\n  Integration,\n  IntegrationClass,\n  Options,\n  SamplingContext,\n  TransactionContext,\n} from '@sentry/types';\nimport { dynamicRequire, isNaN, isNodeEnv, loadModule, logger } from '@sentry/utils';\n\nimport { registerErrorInstrumentation } from './errors';\nimport { IS_DEBUG_BUILD } from './flags';\nimport { IdleTransaction } from './idletransaction';\nimport { Transaction } from './transaction';\nimport { hasTracingEnabled } from './utils';\n\n/** Returns all trace headers that are currently on the top scope. */\nfunction traceHeaders(this: Hub): { [key: string]: string } {\n  const scope = this.getScope();\n  if (scope) {\n    const span = scope.getSpan();\n    if (span) {\n      return {\n        'sentry-trace': span.toTraceparent(),\n      };\n    }\n  }\n  return {};\n}\n\n/**\n * Makes a sampling decision for the given transaction and stores it on the transaction.\n *\n * Called every time a transaction is created. Only transactions which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n *\n * @param transaction: The transaction needing a sampling decision\n * @param options: The current client's options, so we can access `tracesSampleRate` and/or `tracesSampler`\n * @param samplingContext: Default and user-provided data which may be used to help make the decision\n *\n * @returns The given transaction with its `sampled` value set\n */\nfunction sample<T extends Transaction>(transaction: T, options: Options, samplingContext: SamplingContext): T {\n  // nothing to do if tracing is not enabled\n  if (!hasTracingEnabled(options)) {\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the user has forced a sampling decision by passing a `sampled` value in their transaction context, go with that\n  if (transaction.sampled !== undefined) {\n    transaction.setMetadata({\n      transactionSampling: { method: 'explicitly_set' },\n    });\n    return transaction;\n  }\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler(samplingContext);\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_sampler',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n    transaction.setMetadata({\n      transactionSampling: { method: 'inheritance' },\n    });\n  } else {\n    sampleRate = options.tracesSampleRate;\n    transaction.setMetadata({\n      transactionSampling: {\n        method: 'client_rate',\n        // cast to number in case it's a boolean\n        rate: Number(sampleRate),\n      },\n    });\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get. (The\n  // only valid values are booleans or numbers between 0 and 1.)\n  if (!isValidSampleRate(sampleRate)) {\n    IS_DEBUG_BUILD && logger.warn('[Tracing] Discarding transaction because of invalid sample rate.');\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!sampleRate) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    transaction.sampled = false;\n    return transaction;\n  }\n\n  // Now we roll the dice. Math.random is inclusive of 0, but not of 1, so strict < is safe here. In case sampleRate is\n  // a boolean, the < comparison will cause it to be automatically cast to 1 if it's true and 0 if it's false.\n  transaction.sampled = Math.random() < (sampleRate as number | boolean);\n\n  // if we're not going to keep it, we're done\n  if (!transaction.sampled) {\n    IS_DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n    return transaction;\n  }\n\n  IS_DEBUG_BUILD && logger.log(`[Tracing] starting ${transaction.op} transaction - ${transaction.name}`);\n  return transaction;\n}\n\n/**\n * Checks the given sample rate to make sure it is valid type and value (a boolean, or a number between 0 and 1).\n */\nfunction isValidSampleRate(rate: unknown): boolean {\n  // we need to check NaN explicitly because it's of type 'number' and therefore wouldn't get caught by this typecheck\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if (isNaN(rate) || !(typeof rate === 'number' || typeof rate === 'boolean')) {\n    IS_DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          rate,\n        )} of type ${JSON.stringify(typeof rate)}.`,\n      );\n    return false;\n  }\n\n  // in case sampleRate is a boolean, it will get automatically cast to 1 if it's true and 0 if it's false\n  if (rate < 0 || rate > 1) {\n    IS_DEBUG_BUILD &&\n      logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${rate}.`);\n    return false;\n  }\n  return true;\n}\n\n/**\n * Creates a new transaction and adds a sampling decision if it doesn't yet have one.\n *\n * The Hub.startTransaction method delegates to this method to do its work, passing the Hub instance in as `this`, as if\n * it had been called on the hub directly. Exists as a separate function so that it can be injected into the class as an\n * \"extension method.\"\n *\n * @param this: The Hub starting the transaction\n * @param transactionContext: Data used to configure the transaction\n * @param CustomSamplingContext: Optional data to be provided to the `tracesSampler` function (if any)\n *\n * @returns The new transaction\n *\n * @see {@link Hub.startTransaction}\n */\nfunction _startTransaction(\n  this: Hub,\n  transactionContext: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  const client = this.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new Transaction(transactionContext, this);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * Create new idle transaction.\n */\nexport function startIdleTransaction(\n  hub: Hub,\n  transactionContext: TransactionContext,\n  idleTimeout?: number,\n  onScope?: boolean,\n  customSamplingContext?: CustomSamplingContext,\n): IdleTransaction {\n  const client = hub.getClient();\n  const options = (client && client.getOptions()) || {};\n\n  let transaction = new IdleTransaction(transactionContext, hub, idleTimeout, onScope);\n  transaction = sample(transaction, options, {\n    parentSampled: transactionContext.parentSampled,\n    transactionContext,\n    ...customSamplingContext,\n  });\n  if (transaction.sampled) {\n    transaction.initSpanRecorder(options._experiments && (options._experiments.maxSpans as number));\n  }\n  return transaction;\n}\n\n/**\n * @private\n */\nexport function _addTracingExtensions(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n  carrier.__SENTRY__.extensions = carrier.__SENTRY__.extensions || {};\n  if (!carrier.__SENTRY__.extensions.startTransaction) {\n    carrier.__SENTRY__.extensions.startTransaction = _startTransaction;\n  }\n  if (!carrier.__SENTRY__.extensions.traceHeaders) {\n    carrier.__SENTRY__.extensions.traceHeaders = traceHeaders;\n  }\n}\n\n/**\n * @private\n */\nfunction _autoloadDatabaseIntegrations(): void {\n  const carrier = getMainCarrier();\n  if (!carrier.__SENTRY__) {\n    return;\n  }\n\n  const packageToIntegrationMapping: Record<string, () => Integration> = {\n    mongodb() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo();\n    },\n    mongoose() {\n      const integration = dynamicRequire(module, './integrations/node/mongo') as {\n        Mongo: IntegrationClass<Integration>;\n      };\n      return new integration.Mongo({ mongoose: true });\n    },\n    mysql() {\n      const integration = dynamicRequire(module, './integrations/node/mysql') as {\n        Mysql: IntegrationClass<Integration>;\n      };\n      return new integration.Mysql();\n    },\n    pg() {\n      const integration = dynamicRequire(module, './integrations/node/postgres') as {\n        Postgres: IntegrationClass<Integration>;\n      };\n      return new integration.Postgres();\n    },\n  };\n\n  const mappedPackages = Object.keys(packageToIntegrationMapping)\n    .filter(moduleName => !!loadModule(moduleName))\n    .map(pkg => {\n      try {\n        return packageToIntegrationMapping[pkg]();\n      } catch (e) {\n        return undefined;\n      }\n    })\n    .filter(p => p) as Integration[];\n\n  if (mappedPackages.length > 0) {\n    carrier.__SENTRY__.integrations = [...(carrier.__SENTRY__.integrations || []), ...mappedPackages];\n  }\n}\n\n/**\n * This patches the global object and injects the Tracing extensions methods\n */\nexport function addExtensionMethods(): void {\n  _addTracingExtensions();\n\n  // Detect and automatically load specified integrations.\n  if (isNodeEnv()) {\n    _autoloadDatabaseIntegrations();\n  }\n\n  // If an error happens globally, we should make sure transaction status is set to error.\n  registerErrorInstrumentation();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}