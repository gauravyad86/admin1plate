{"ast":null,"code":"import { __read } from \"tslib\";\nimport { isError, isEvent, isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input, depth, maxProperties) {\n  if (depth === void 0) {\n    depth = +Infinity;\n  }\n  if (maxProperties === void 0) {\n    maxProperties = +Infinity;\n  }\n  try {\n    // since we're at the outermost level, there is no key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return {\n      ERROR: \"**non-serializable** (\" + err + \")\"\n    };\n  }\n}\n/** JSDoc */\nexport function normalizeToSize(object,\n// Default Node.js REPL depth\ndepth,\n// 100kB, as 200kB is max payload size, so half sounds reasonable\nmaxSize) {\n  if (depth === void 0) {\n    depth = 3;\n  }\n  if (maxSize === void 0) {\n    maxSize = 100 * 1024;\n  }\n  var normalized = normalize(object, depth);\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n  return normalized;\n}\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(key, value, depth, maxProperties, memo) {\n  if (depth === void 0) {\n    depth = +Infinity;\n  }\n  if (maxProperties === void 0) {\n    maxProperties = +Infinity;\n  }\n  if (memo === void 0) {\n    memo = memoBuilder();\n  }\n  var _a = __read(memo, 2),\n    memoize = _a[0],\n    unmemoize = _a[1];\n  // If the value has a `toJSON` method, see if we can bail and let it do the work\n  var valueWithToJSON = value;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      return valueWithToJSON.toJSON();\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n  // Get the simple cases out of the way first\n  if (value === null || ['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value)) {\n    return value;\n  }\n  var stringified = stringifyValue(key, value);\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  var normalized = Array.isArray(value) ? [] : {};\n  var numAdded = 0;\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  var visitable = isError(value) || isEvent(value) ? convertToPlainObject(value) : value;\n  for (var visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n    // Recursively visit all the child nodes\n    var visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n    numAdded += 1;\n  }\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n  // Return accumulated values\n  return normalized;\n}\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(key,\n// this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n// our internal use, it'll do\nvalue) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && value._events) {\n      return '[Domain]';\n    }\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n    if (typeof value === 'function') {\n      return \"[Function: \" + getFunctionName(value) + \"]\";\n    }\n    if (typeof value === 'symbol') {\n      return \"[\" + String(value) + \"]\";\n    }\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return \"[BigInt: \" + String(value) + \"]\";\n    }\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return \"[object \" + Object.getPrototypeOf(value).constructor.name + \"]\";\n  } catch (err) {\n    return \"**non-serializable** (\" + err + \")\";\n  }\n}\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n/** Calculates bytes size of input object */\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}","map":{"version":3,"names":["isError","isEvent","isNaN","isSyntheticEvent","memoBuilder","convertToPlainObject","getFunctionName","normalize","input","depth","maxProperties","Infinity","visit","err","ERROR","normalizeToSize","object","maxSize","normalized","jsonSize","key","value","memo","_a","__read","memoize","unmemoize","valueWithToJSON","toJSON","includes","stringified","stringifyValue","startsWith","replace","Array","isArray","numAdded","visitable","visitKey","Object","prototype","hasOwnProperty","call","visitValue","walk","_events","global","window","document","String","getPrototypeOf","constructor","name","utf8Length","encodeURI","split","length","JSON","stringify"],"sources":["../../src/normalize.ts"],"sourcesContent":["import { Primitive } from '@sentry/types';\n\nimport { isError, isEvent, isNaN, isSyntheticEvent } from './is';\nimport { memoBuilder, MemoFunc } from './memo';\nimport { convertToPlainObject } from './object';\nimport { getFunctionName } from './stacktrace';\n\ntype Prototype = { constructor: (...args: unknown[]) => unknown };\n// This is a hack to placate TS, relying on the fact that technically, arrays are objects with integer keys. Normally we\n// think of those keys as actual numbers, but `arr['0']` turns out to work just as well as `arr[0]`, and doing it this\n// way lets us use a single type in the places where behave as if we are only dealing with objects, even if some of them\n// might be arrays.\ntype ObjOrArray<T> = { [key: string]: T };\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normallized output..\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\nexport function normalize(input: unknown, depth: number = +Infinity, maxProperties: number = +Infinity): any {\n  try {\n    // since we're at the outermost level, there is no key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nexport function normalizeToSize<T>(\n  object: { [key: string]: any },\n  // Default Node.js REPL depth\n  depth: number = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize: number = 100 * 1024,\n): T {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized as T;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key: string,\n  value: unknown,\n  depth: number = +Infinity,\n  maxProperties: number = +Infinity,\n  memo: MemoFunc = memoBuilder(),\n): Primitive | ObjOrArray<unknown> {\n  const [memoize, unmemoize] = memo;\n\n  // If the value has a `toJSON` method, see if we can bail and let it do the work\n  const valueWithToJSON = value as unknown & { toJSON?: () => Primitive | ObjOrArray<unknown> };\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      return valueWithToJSON.toJSON();\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // Get the simple cases out of the way first\n  if (value === null || (['number', 'boolean', 'string'].includes(typeof value) && !isNaN(value))) {\n    return value as Primitive;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // We're also done if we've reached the max depth\n  if (depth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) as ObjOrArray<unknown>;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = (isError(value) || isEvent(value) ? convertToPlainObject(value) : value) as ObjOrArray<unknown>;\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, depth - 1, maxProperties, memo);\n\n    numAdded += 1;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n// TODO remove this in v7 (this means the method will no longer be exported, under any name)\nexport { visit as walk };\n\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key: unknown,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value: Exclude<unknown, string | number | boolean | null>,\n): string {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value as { _events: unknown })._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && value !== value) {\n      return '[NaN]';\n    }\n\n    // this catches `undefined` (but not `null`, which is a primitive and can be serialized on its own)\n    if (value === void 0) {\n      return '[undefined]';\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    return `[object ${(Object.getPrototypeOf(value) as Prototype).constructor.name}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value: string): number {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\nfunction jsonSize(value: any): number {\n  return utf8Length(JSON.stringify(value));\n}\n"],"mappings":";AAEA,SAASA,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,gBAAgB,QAAQ,MAAM;AAChE,SAASC,WAAW,QAAkB,QAAQ;AAC9C,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,SAASC,eAAe,QAAQ,cAAc;AAS9C;;;;;;;;;;;;;;;;;;;AAmBA,OAAM,SAAUC,SAASA,CAACC,KAAc,EAAEC,KAAyB,EAAEC,aAAiC;EAA5D,IAAAD,KAAA;IAAAA,KAAA,IAAiBE,QAAQ;EAAA;EAAE,IAAAD,aAAA;IAAAA,aAAA,IAAyBC,QAAQ;EAAA;EACpG,IAAI;IACF;IACA,OAAOC,KAAK,CAAC,EAAE,EAAEJ,KAAK,EAAEC,KAAK,EAAEC,aAAa,CAAC;GAC9C,CAAC,OAAOG,GAAG,EAAE;IACZ,OAAO;MAAEC,KAAK,EAAE,2BAAyBD,GAAG;IAAG,CAAE;;AAErD;AAEA;AACA,OAAM,SAAUE,eAAeA,CAC7BC,MAA8B;AAC9B;AACAP,KAAiB;AACjB;AACAQ,OAA4B;EAF5B,IAAAR,KAAA;IAAAA,KAAA,IAAiB;EAAA;EAEjB,IAAAQ,OAAA;IAAAA,OAAA,GAAkB,GAAG,GAAG,IAAI;EAAA;EAE5B,IAAMC,UAAU,GAAGX,SAAS,CAACS,MAAM,EAAEP,KAAK,CAAC;EAE3C,IAAIU,QAAQ,CAACD,UAAU,CAAC,GAAGD,OAAO,EAAE;IAClC,OAAOF,eAAe,CAACC,MAAM,EAAEP,KAAK,GAAG,CAAC,EAAEQ,OAAO,CAAC;;EAGpD,OAAOC,UAAe;AACxB;AAEA;;;;;;;;;AASA,SAASN,KAAKA,CACZQ,GAAW,EACXC,KAAc,EACdZ,KAAyB,EACzBC,aAAiC,EACjCY,IAA8B;EAF9B,IAAAb,KAAA;IAAAA,KAAA,IAAiBE,QAAQ;EAAA;EACzB,IAAAD,aAAA;IAAAA,aAAA,IAAyBC,QAAQ;EAAA;EACjC,IAAAW,IAAA;IAAAA,IAAA,GAAiBlB,WAAW,EAAE;EAAA;EAExB,IAAAmB,EAAA,GAAAC,MAAA,CAAAF,IAAA,IAA2B;IAA1BG,OAAA,GAAAF,EAAA,GAAO;IAAEG,SAAA,GAAAH,EAAA,GAAiB;EAEjC;EACA,IAAMI,eAAe,GAAGN,KAAqE;EAC7F,IAAIM,eAAe,IAAI,OAAOA,eAAe,CAACC,MAAM,KAAK,UAAU,EAAE;IACnE,IAAI;MACF,OAAOD,eAAe,CAACC,MAAM,EAAE;KAChC,CAAC,OAAOf,GAAG,EAAE;MACZ;IAAA;;EAIJ;EACA,IAAIQ,KAAK,KAAK,IAAI,IAAK,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,CAAC,CAACQ,QAAQ,CAAC,OAAOR,KAAK,CAAC,IAAI,CAACnB,KAAK,CAACmB,KAAK,CAAE,EAAE;IAC/F,OAAOA,KAAkB;;EAG3B,IAAMS,WAAW,GAAGC,cAAc,CAACX,GAAG,EAAEC,KAAK,CAAC;EAE9C;EACA;EACA,IAAI,CAACS,WAAW,CAACE,UAAU,CAAC,UAAU,CAAC,EAAE;IACvC,OAAOF,WAAW;;EAGpB;EACA,IAAIrB,KAAK,KAAK,CAAC,EAAE;IACf;IACA,OAAOqB,WAAW,CAACG,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;;EAG3C;EACA,IAAIR,OAAO,CAACJ,KAAK,CAAC,EAAE;IAClB,OAAO,cAAc;;EAGvB;EACA;EACA;EACA,IAAMH,UAAU,GAAIgB,KAAK,CAACC,OAAO,CAACd,KAAK,CAAC,GAAG,EAAE,GAAG,EAA0B;EAC1E,IAAIe,QAAQ,GAAG,CAAC;EAEhB;EACA;EACA,IAAMC,SAAS,GAAIrC,OAAO,CAACqB,KAAK,CAAC,IAAIpB,OAAO,CAACoB,KAAK,CAAC,GAAGhB,oBAAoB,CAACgB,KAAK,CAAC,GAAGA,KAA6B;EAEjH,KAAK,IAAMiB,QAAQ,IAAID,SAAS,EAAE;IAChC;IACA,IAAI,CAACE,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACL,SAAS,EAAEC,QAAQ,CAAC,EAAE;MAC9D;;IAGF,IAAIF,QAAQ,IAAI1B,aAAa,EAAE;MAC7BQ,UAAU,CAACoB,QAAQ,CAAC,GAAG,mBAAmB;MAC1C;;IAGF;IACA,IAAMK,UAAU,GAAGN,SAAS,CAACC,QAAQ,CAAC;IACtCpB,UAAU,CAACoB,QAAQ,CAAC,GAAG1B,KAAK,CAAC0B,QAAQ,EAAEK,UAAU,EAAElC,KAAK,GAAG,CAAC,EAAEC,aAAa,EAAEY,IAAI,CAAC;IAElFc,QAAQ,IAAI,CAAC;;EAGf;EACAV,SAAS,CAACL,KAAK,CAAC;EAEhB;EACA,OAAOH,UAAU;AACnB;AAEA;AACA,SAASN,KAAK,IAAIgC,IAAI;AAEtB;;;;;;;;;AASA,SAASb,cAAcA,CACrBX,GAAY;AACZ;AACA;AACAC,KAAyD;EAEzD,IAAI;IACF,IAAID,GAAG,KAAK,QAAQ,IAAIC,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAKA,KAA8B,CAACwB,OAAO,EAAE;MACrG,OAAO,UAAU;;IAGnB,IAAIzB,GAAG,KAAK,eAAe,EAAE;MAC3B,OAAO,iBAAiB;;IAG1B;IACA;IAEA,IAAI,OAAO0B,MAAM,KAAK,WAAW,IAAIzB,KAAK,KAAKyB,MAAM,EAAE;MACrD,OAAO,UAAU;;IAGnB;IACA,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI1B,KAAK,KAAK0B,MAAM,EAAE;MACrD,OAAO,UAAU;;IAGnB;IACA,IAAI,OAAOC,QAAQ,KAAK,WAAW,IAAI3B,KAAK,KAAK2B,QAAQ,EAAE;MACzD,OAAO,YAAY;;IAGrB;IACA,IAAI7C,gBAAgB,CAACkB,KAAK,CAAC,EAAE;MAC3B,OAAO,kBAAkB;;IAG3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAKA,KAAK,EAAE;MAChD,OAAO,OAAO;;IAGhB;IACA,IAAIA,KAAK,KAAK,KAAK,CAAC,EAAE;MACpB,OAAO,aAAa;;IAGtB,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;MAC/B,OAAO,gBAAcf,eAAe,CAACe,KAAK,CAAC,MAAG;;IAGhD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,MAAI4B,MAAM,CAAC5B,KAAK,CAAC,MAAG;;IAG7B;IACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,OAAO,cAAY4B,MAAM,CAAC5B,KAAK,CAAC,MAAG;;IAGrC;IACA;IACA;IACA;IACA,OAAO,aAAYkB,MAAM,CAACW,cAAc,CAAC7B,KAAK,CAAe,CAAC8B,WAAW,CAACC,IAAI,MAAG;GAClF,CAAC,OAAOvC,GAAG,EAAE;IACZ,OAAO,2BAAyBA,GAAG,MAAG;;AAE1C;AAEA;AACA,SAASwC,UAAUA,CAAChC,KAAa;EAC/B;EACA,OAAO,CAAC,CAACiC,SAAS,CAACjC,KAAK,CAAC,CAACkC,KAAK,CAAC,OAAO,CAAC,CAACC,MAAM;AACjD;AAEA;AACA,SAASrC,QAAQA,CAACE,KAAU;EAC1B,OAAOgC,UAAU,CAACI,IAAI,CAACC,SAAS,CAACrC,KAAK,CAAC,CAAC;AAC1C"},"metadata":{},"sourceType":"module"}