{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope } from '@sentry/minimal';\nvar ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nvar ACTION_BREADCRUMB_TYPE = 'info';\nvar STATE_CONTEXT_KEY = 'redux.state';\nvar defaultOptions = {\n  actionTransformer: function (action) {\n    return action;\n  },\n  stateTransformer: function (state) {\n    return state || null;\n  }\n};\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  var options = __assign(__assign({}, defaultOptions), enhancerOptions);\n  return function (next) {\n    return function (reducer, initialState) {\n      var sentryReducer = function (state, action) {\n        var newState = reducer(state, action);\n        configureScope(function (scope) {\n          /* Action breadcrumbs */\n          var transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE\n            });\n          }\n          /* Set latest state to scope */\n          var transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext(STATE_CONTEXT_KEY, transformedState);\n          } else {\n            scope.setContext(STATE_CONTEXT_KEY, null);\n          }\n          /* Allow user to configure scope with latest state */\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          var configureScopeWithState = options.configureScopeWithState;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n        return newState;\n      };\n      return next(sentryReducer, initialState);\n    };\n  };\n}\nexport { createReduxEnhancer };","map":{"version":3,"names":["configureScope","ACTION_BREADCRUMB_CATEGORY","ACTION_BREADCRUMB_TYPE","STATE_CONTEXT_KEY","defaultOptions","actionTransformer","action","stateTransformer","state","createReduxEnhancer","enhancerOptions","options","__assign","next","reducer","initialState","sentryReducer","newState","scope","transformedAction","addBreadcrumb","category","data","type","transformedState","setContext","configureScopeWithState"],"sources":["../../src/redux.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { configureScope } from '@sentry/minimal';\nimport { Scope } from '@sentry/types';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction,\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\nconst STATE_CONTEXT_KEY = 'redux.state';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator =>\n    <S = any, A extends Action = AnyAction>(reducer: Reducer<S, A>, initialState?: PreloadedState<S>) => {\n      const sentryReducer: Reducer<S, A> = (state, action): S => {\n        const newState = reducer(state, action);\n\n        configureScope(scope => {\n          /* Action breadcrumbs */\n          const transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            scope.addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE,\n            });\n          }\n\n          /* Set latest state to scope */\n          const transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            scope.setContext(STATE_CONTEXT_KEY, transformedState);\n          } else {\n            scope.setContext(STATE_CONTEXT_KEY, null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          const { configureScopeWithState } = options;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n        });\n\n        return newState;\n      };\n\n      return next(sentryReducer, initialState);\n    };\n}\n\nexport { createReduxEnhancer };\n"],"mappings":";AAAA;AACA,SAASA,cAAc,QAAQ,iBAAiB;AAmEhD,IAAMC,0BAA0B,GAAG,cAAc;AACjD,IAAMC,sBAAsB,GAAG,MAAM;AACrC,IAAMC,iBAAiB,GAAG,aAAa;AAEvC,IAAMC,cAAc,GAA0B;EAC5CC,iBAAiB,EAAE,SAAAA,CAAAC,MAAM;IAAI,OAAAA,MAAM;EAAN,CAAM;EACnCC,gBAAgB,EAAE,SAAAA,CAAAC,KAAK;IAAI,OAAAA,KAAK,IAAI,IAAI;EAAb;CAC5B;AAED;;;;;AAKA,SAASC,mBAAmBA,CAACC,eAAgD;EAC3E;EACA,IAAMC,OAAO,GAAAC,QAAA,CAAAA,QAAA,KACRR,cAAc,GACdM,eAAe,CACnB;EAED,OAAO,UAACG,IAA+B;IACrC,iBAAwCC,OAAsB,EAAEC,YAAgC;MAC9F,IAAMC,aAAa,GAAkB,SAAAA,CAACR,KAAK,EAAEF,MAAM;QACjD,IAAMW,QAAQ,GAAGH,OAAO,CAACN,KAAK,EAAEF,MAAM,CAAC;QAEvCN,cAAc,CAAC,UAAAkB,KAAK;UAClB;UACA,IAAMC,iBAAiB,GAAGR,OAAO,CAACN,iBAAiB,CAACC,MAAM,CAAC;UAC3D,IAAI,OAAOa,iBAAiB,KAAK,WAAW,IAAIA,iBAAiB,KAAK,IAAI,EAAE;YAC1ED,KAAK,CAACE,aAAa,CAAC;cAClBC,QAAQ,EAAEpB,0BAA0B;cACpCqB,IAAI,EAAEH,iBAAiB;cACvBI,IAAI,EAAErB;aACP,CAAC;;UAGJ;UACA,IAAMsB,gBAAgB,GAAGb,OAAO,CAACJ,gBAAgB,CAACU,QAAQ,CAAC;UAC3D,IAAI,OAAOO,gBAAgB,KAAK,WAAW,IAAIA,gBAAgB,KAAK,IAAI,EAAE;YACxEN,KAAK,CAACO,UAAU,CAACtB,iBAAiB,EAAEqB,gBAAgB,CAAC;WACtD,MAAM;YACLN,KAAK,CAACO,UAAU,CAACtB,iBAAiB,EAAE,IAAI,CAAC;;UAG3C;UACA;UACQ,IAAAuB,uBAAA,GAAAf,OAAA,CAAAe,uBAAuB;UAC/B,IAAI,OAAOA,uBAAuB,KAAK,UAAU,EAAE;YACjDA,uBAAuB,CAACR,KAAK,EAAED,QAAQ,CAAC;;QAE5C,CAAC,CAAC;QAEF,OAAOA,QAAQ;MACjB,CAAC;MAED,OAAOJ,IAAI,CAACG,aAAa,EAAED,YAAY,CAAC;IAC1C,CAAC;EAnCD,CAmCC;AACL;AAEA,SAASN,mBAAmB"},"metadata":{},"sourceType":"module"}