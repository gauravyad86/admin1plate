{"ast":null,"code":"import { getGlobalObject } from './global';\nimport { isString } from './is';\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem, keyAttrs) {\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    var currentElem = elem;\n    var MAX_TRAVERSE_HEIGHT = 5;\n    var MAX_OUTPUT_LEN = 80;\n    var out = [];\n    var height = 0;\n    var len = 0;\n    var separator = ' > ';\n    var sepLength = separator.length;\n    var nextStr = void 0;\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  var elem = el;\n  var out = [];\n  var className;\n  var classes;\n  var key;\n  var attr;\n  var i;\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n  out.push(elem.tagName.toLowerCase());\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  var keyAttrPairs = keyAttrs && keyAttrs.length ? keyAttrs.filter(function (keyAttr) {\n    return elem.getAttribute(keyAttr);\n  }).map(function (keyAttr) {\n    return [keyAttr, elem.getAttribute(keyAttr)];\n  }) : null;\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(function (keyAttrPair) {\n      out.push(\"[\" + keyAttrPair[0] + \"=\\\"\" + keyAttrPair[1] + \"\\\"]\");\n    });\n  } else {\n    if (elem.id) {\n      out.push(\"#\" + elem.id);\n    }\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(\".\" + classes[i]);\n      }\n    }\n  }\n  var allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(\"[\" + key + \"=\\\"\" + attr + \"\\\"]\");\n    }\n  }\n  return out.join('');\n}\n/**\n * A safe form of location.href\n */\nexport function getLocationHref() {\n  var global = getGlobalObject();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}","map":{"version":3,"names":["getGlobalObject","isString","htmlTreeAsString","elem","keyAttrs","currentElem","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","len","separator","sepLength","length","nextStr","_htmlElementAsString","push","parentNode","reverse","join","_oO","el","className","classes","key","attr","i","tagName","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","split","allowedAttrs","getLocationHref","global","document","location","href","oO"],"sources":["../../src/browser.ts"],"sourcesContent":["import { getGlobalObject } from './global';\nimport { isString } from './is';\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(elem: unknown, keyAttrs?: string[]): string {\n  type SimpleNode = {\n    parentNode: SimpleNode;\n  } | null;\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const MAX_OUTPUT_LEN = 80;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n\n    // eslint-disable-next-line no-plusplus\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n  let className;\n  let classes;\n  let key;\n  let attr;\n  let i;\n\n  if (!elem || !elem.tagName) {\n    return '';\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs =\n    keyAttrs && keyAttrs.length\n      ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n      : null;\n\n  if (keyAttrPairs && keyAttrPairs.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    // eslint-disable-next-line prefer-const\n    className = elem.className;\n    if (className && isString(className)) {\n      classes = className.split(/\\s+/);\n      for (i = 0; i < classes.length; i++) {\n        out.push(`.${classes[i]}`);\n      }\n    }\n  }\n  const allowedAttrs = ['type', 'name', 'title', 'alt'];\n  for (i = 0; i < allowedAttrs.length; i++) {\n    key = allowedAttrs[i];\n    attr = elem.getAttribute(key);\n    if (attr) {\n      out.push(`[${key}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  const global = getGlobalObject<Window>();\n  try {\n    return global.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}