{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// eslint-disable-next-line @typescript-eslint/unbound-method\nvar objectToString = Object.prototype.toString;\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\nfunction isBuiltin(wat, ty) {\n  return objectToString.call(wat) === \"[object \" + ty + \"]\";\n}\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat) {\n  return wat === null || typeof wat !== 'object' && typeof wat !== 'function';\n}\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat) {\n  return typeof wat === 'number' && wat !== wat;\n}\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}","map":{"version":3,"names":["objectToString","Object","prototype","toString","isError","wat","call","isInstanceOf","Error","isBuiltin","ty","isErrorEvent","isDOMError","isDOMException","isString","isPrimitive","isPlainObject","isEvent","Event","isElement","Element","isRegExp","isThenable","Boolean","then","isSyntheticEvent","isNaN","base","_e"],"sources":["../../src/is.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\nimport { Primitive } from '@sentry/types';\n\n// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isError(wat: unknown): wat is Error {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n\nfunction isBuiltin(wat: unknown, ty: string): boolean {\n  return objectToString.call(wat) === `[object ${ty}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isErrorEvent(wat: unknown): boolean {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMError(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isDOMException(wat: unknown): boolean {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isString(wat: unknown): wat is string {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPrimitive(wat: unknown): wat is Primitive {\n  return wat === null || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isPlainObject(wat: unknown): wat is Record<string, unknown> {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isEvent(wat: unknown): boolean {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isElement(wat: unknown): boolean {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isRegExp(wat: unknown): wat is RegExp {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nexport function isThenable(wat: any): wat is PromiseLike<any> {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat && wat.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isSyntheticEvent(wat: unknown): boolean {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value is NaN\n * {@link isNaN}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nexport function isNaN(wat: unknown): boolean {\n  return typeof wat === 'number' && wat !== wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nexport function isInstanceOf(wat: any, base: any): boolean {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA;AACA,IAAMA,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACC,QAAQ;AAEhD;;;;;;;AAOA,OAAM,SAAUC,OAAOA,CAACC,GAAY;EAClC,QAAQL,cAAc,CAACM,IAAI,CAACD,GAAG,CAAC;IAC9B,KAAK,gBAAgB;IACrB,KAAK,oBAAoB;IACzB,KAAK,uBAAuB;MAC1B,OAAO,IAAI;IACb;MACE,OAAOE,YAAY,CAACF,GAAG,EAAEG,KAAK,CAAC;;AAErC;AAEA,SAASC,SAASA,CAACJ,GAAY,EAAEK,EAAU;EACzC,OAAOV,cAAc,CAACM,IAAI,CAACD,GAAG,CAAC,KAAK,aAAWK,EAAE,MAAG;AACtD;AAEA;;;;;;;AAOA,OAAM,SAAUC,YAAYA,CAACN,GAAY;EACvC,OAAOI,SAAS,CAACJ,GAAG,EAAE,YAAY,CAAC;AACrC;AAEA;;;;;;;AAOA,OAAM,SAAUO,UAAUA,CAACP,GAAY;EACrC,OAAOI,SAAS,CAACJ,GAAG,EAAE,UAAU,CAAC;AACnC;AAEA;;;;;;;AAOA,OAAM,SAAUQ,cAAcA,CAACR,GAAY;EACzC,OAAOI,SAAS,CAACJ,GAAG,EAAE,cAAc,CAAC;AACvC;AAEA;;;;;;;AAOA,OAAM,SAAUS,QAAQA,CAACT,GAAY;EACnC,OAAOI,SAAS,CAACJ,GAAG,EAAE,QAAQ,CAAC;AACjC;AAEA;;;;;;;AAOA,OAAM,SAAUU,WAAWA,CAACV,GAAY;EACtC,OAAOA,GAAG,KAAK,IAAI,IAAK,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,UAAW;AAC/E;AAEA;;;;;;;AAOA,OAAM,SAAUW,aAAaA,CAACX,GAAY;EACxC,OAAOI,SAAS,CAACJ,GAAG,EAAE,QAAQ,CAAC;AACjC;AAEA;;;;;;;AAOA,OAAM,SAAUY,OAAOA,CAACZ,GAAY;EAClC,OAAO,OAAOa,KAAK,KAAK,WAAW,IAAIX,YAAY,CAACF,GAAG,EAAEa,KAAK,CAAC;AACjE;AAEA;;;;;;;AAOA,OAAM,SAAUC,SAASA,CAACd,GAAY;EACpC,OAAO,OAAOe,OAAO,KAAK,WAAW,IAAIb,YAAY,CAACF,GAAG,EAAEe,OAAO,CAAC;AACrE;AAEA;;;;;;;AAOA,OAAM,SAAUC,QAAQA,CAAChB,GAAY;EACnC,OAAOI,SAAS,CAACJ,GAAG,EAAE,QAAQ,CAAC;AACjC;AAEA;;;;AAIA,OAAM,SAAUiB,UAAUA,CAACjB,GAAQ;EACjC;EACA,OAAOkB,OAAO,CAAClB,GAAG,IAAIA,GAAG,CAACmB,IAAI,IAAI,OAAOnB,GAAG,CAACmB,IAAI,KAAK,UAAU,CAAC;AACnE;AAEA;;;;;;;AAOA,OAAM,SAAUC,gBAAgBA,CAACpB,GAAY;EAC3C,OAAOW,aAAa,CAACX,GAAG,CAAC,IAAI,aAAa,IAAIA,GAAG,IAAI,gBAAgB,IAAIA,GAAG,IAAI,iBAAiB,IAAIA,GAAG;AAC1G;AAEA;;;;;;;AAOA,OAAM,SAAUqB,KAAKA,CAACrB,GAAY;EAChC,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,KAAKA,GAAG;AAC/C;AAEA;;;;;;;;AAQA,OAAM,SAAUE,YAAYA,CAACF,GAAQ,EAAEsB,IAAS;EAC9C,IAAI;IACF,OAAOtB,GAAG,YAAYsB,IAAI;GAC3B,CAAC,OAAOC,EAAE,EAAE;IACX,OAAO,KAAK;;AAEhB"},"metadata":{},"sourceType":"module"}