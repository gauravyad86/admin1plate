{"ast":null,"code":"import { __assign, __extends, __read } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getCurrentHub } from '@sentry/browser';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { REACT_MOUNT_OP, REACT_RENDER_OP, REACT_UPDATE_OP } from './constants';\nexport var UNKNOWN_COMPONENT = 'unknown';\nvar TRACING_GETTER = {\n  id: 'Tracing'\n};\nvar globalTracingIntegration = null;\n/** @deprecated remove when @sentry/apm no longer used */\nvar getTracingIntegration = function () {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction pushActivity(name, op) {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n  return globalTracingIntegration.constructor.pushActivity(name, {\n    description: \"<\" + name + \">\",\n    op: op\n  });\n}\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction popActivity(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n  globalTracingIntegration.constructor.popActivity(activity);\n}\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction getActivitySpan(activity) {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n  return globalTracingIntegration.constructor.getActivitySpan(activity);\n}\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nvar Profiler = /** @class */function (_super) {\n  __extends(Profiler, _super);\n  function Profiler(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * The span of the mount activity\n     * Made protected for the React Native SDK to access\n     */\n    _this._mountSpan = undefined;\n    // The activity representing how long it takes to mount a component.\n    _this._mountActivity = null;\n    var _a = _this.props,\n      name = _a.name,\n      _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b;\n    if (disabled) {\n      return _this;\n    }\n    // If they are using @sentry/apm, we need to push/pop activities\n    // eslint-disable-next-line deprecation/deprecation\n    if (getTracingIntegration()) {\n      // eslint-disable-next-line deprecation/deprecation\n      _this._mountActivity = pushActivity(name, REACT_MOUNT_OP);\n    } else {\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        _this._mountSpan = activeTransaction.startChild({\n          description: \"<\" + name + \">\",\n          op: REACT_MOUNT_OP\n        });\n      }\n    }\n    return _this;\n  }\n  // If a component mounted, we can finish the mount activity.\n  Profiler.prototype.componentDidMount = function () {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountSpan = getActivitySpan(this._mountActivity);\n      // eslint-disable-next-line deprecation/deprecation\n      popActivity(this._mountActivity);\n      this._mountActivity = null;\n    }\n  };\n  Profiler.prototype.componentDidUpdate = function (_a) {\n    var _this = this;\n    var updateProps = _a.updateProps,\n      _b = _a.includeUpdates,\n      includeUpdates = _b === void 0 ? true : _b;\n    // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      var changedProps = Object.keys(updateProps).filter(function (k) {\n        return updateProps[k] !== _this.props.updateProps[k];\n      });\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        var now = timestampWithMs();\n        this._mountSpan.startChild({\n          data: {\n            changedProps: changedProps\n          },\n          description: \"<\" + this.props.name + \">\",\n          endTimestamp: now,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now\n        });\n      }\n    }\n  };\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  Profiler.prototype.componentWillUnmount = function () {\n    var _a = this.props,\n      name = _a.name,\n      _b = _a.includeRender,\n      includeRender = _b === void 0 ? true : _b;\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: \"<\" + name + \">\",\n        endTimestamp: timestampWithMs(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp\n      });\n    }\n  };\n  Profiler.prototype.render = function () {\n    return this.props.children;\n  };\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  Profiler.defaultProps = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true\n  };\n  return Profiler;\n}(React.Component);\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler(WrappedComponent,\n// We do not want to have `updateProps` given in options, it is instead filled through the HOC.\noptions) {\n  var componentDisplayName = options && options.name || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n  var Wrapped = function (props) {\n    return React.createElement(Profiler, __assign({}, options, {\n      name: componentDisplayName,\n      updateProps: props\n    }), React.createElement(WrappedComponent, __assign({}, props)));\n  };\n  Wrapped.displayName = \"profiler(\" + componentDisplayName + \")\";\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(name, options) {\n  if (options === void 0) {\n    options = {\n      disabled: false,\n      hasRenderSpan: true\n    };\n  }\n  var _a = __read(React.useState(function () {\n      if (options && options.disabled) {\n        return undefined;\n      }\n      var activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        return activeTransaction.startChild({\n          description: \"<\" + name + \">\",\n          op: REACT_MOUNT_OP\n        });\n      }\n      return undefined;\n    }), 1),\n    mountSpan = _a[0];\n  React.useEffect(function () {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n    return function () {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: \"<\" + name + \">\",\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\nexport { withProfiler, Profiler, useProfiler };\n/** Grabs active transaction off scope */\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n  if (hub) {\n    var scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction();\n    }\n  }\n  return undefined;\n}","map":{"version":3,"names":["getCurrentHub","timestampWithMs","hoistNonReactStatics","React","REACT_MOUNT_OP","REACT_RENDER_OP","REACT_UPDATE_OP","UNKNOWN_COMPONENT","TRACING_GETTER","id","globalTracingIntegration","getTracingIntegration","getIntegration","pushActivity","name","op","constructor","description","popActivity","activity","getActivitySpan","undefined","Profiler","_super","__extends","props","_this","call","_mountSpan","_mountActivity","_a","_b","disabled","activeTransaction","getActiveTransaction","startChild","prototype","componentDidMount","finish","componentDidUpdate","updateProps","includeUpdates","changedProps","Object","keys","filter","k","length","now","data","endTimestamp","startTimestamp","componentWillUnmount","includeRender","render","children","defaultProps","Component","withProfiler","WrappedComponent","options","componentDisplayName","displayName","Wrapped","createElement","__assign","useProfiler","hasRenderSpan","__read","useState","mountSpan","useEffect","hub","scope","getScope","getTransaction"],"sources":["../../src/profiler.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { getCurrentHub, Hub } from '@sentry/browser';\nimport { Integration, IntegrationClass, Span, Transaction } from '@sentry/types';\nimport { timestampWithMs } from '@sentry/utils';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nimport { REACT_MOUNT_OP, REACT_RENDER_OP, REACT_UPDATE_OP } from './constants';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nconst TRACING_GETTER = ({\n  id: 'Tracing',\n} as any) as IntegrationClass<Integration>;\n\nlet globalTracingIntegration: Integration | null = null;\n/** @deprecated remove when @sentry/apm no longer used */\nconst getTracingIntegration = (): Integration | null => {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction pushActivity(name: string, op: string): number | null {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n\n  return (globalTracingIntegration as any).constructor.pushActivity(name, {\n    description: `<${name}>`,\n    op,\n  });\n}\n\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction popActivity(activity: number | null): void {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n\n  (globalTracingIntegration as any).constructor.popActivity(activity);\n}\n\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n * @deprecated remove when @sentry/apm no longer used\n */\nfunction getActivitySpan(activity: number | null): Span | undefined {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n\n  return (globalTracingIntegration as any).constructor.getActivitySpan(activity) as Span | undefined;\n}\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // props given to component being profiled.\n  updateProps: { [key: string]: unknown };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  /**\n   * The span of the mount activity\n   * Made protected for the React Native SDK to access\n   */\n  protected _mountSpan: Span | undefined = undefined;\n\n  // The activity representing how long it takes to mount a component.\n  private _mountActivity: number | null = null;\n\n  // eslint-disable-next-line @typescript-eslint/member-ordering\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    // If they are using @sentry/apm, we need to push/pop activities\n    // eslint-disable-next-line deprecation/deprecation\n    if (getTracingIntegration()) {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountActivity = pushActivity(name, REACT_MOUNT_OP);\n    } else {\n      const activeTransaction = getActiveTransaction();\n      if (activeTransaction) {\n        this._mountSpan = activeTransaction.startChild({\n          description: `<${name}>`,\n          op: REACT_MOUNT_OP,\n        });\n      }\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    if (this._mountSpan) {\n      this._mountSpan.finish();\n    } else {\n      // eslint-disable-next-line deprecation/deprecation\n      this._mountSpan = getActivitySpan(this._mountActivity);\n      // eslint-disable-next-line deprecation/deprecation\n      popActivity(this._mountActivity);\n      this._mountActivity = null;\n    }\n  }\n\n  public componentDidUpdate({ updateProps, includeUpdates = true }: ProfilerProps): void {\n    // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this._mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        const now = timestampWithMs();\n        this._mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          endTimestamp: now,\n          op: REACT_UPDATE_OP,\n          startTimestamp: now,\n        });\n      }\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this._mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this._mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: REACT_RENDER_OP,\n        startTimestamp: this._mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends Record<string, any>>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatics(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountSpan] = React.useState(() => {\n    if (options && options.disabled) {\n      return undefined;\n    }\n\n    const activeTransaction = getActiveTransaction();\n    if (activeTransaction) {\n      return activeTransaction.startChild({\n        description: `<${name}>`,\n        op: REACT_MOUNT_OP,\n      });\n    }\n\n    return undefined;\n  });\n\n  React.useEffect(() => {\n    if (mountSpan) {\n      mountSpan.finish();\n    }\n\n    return (): void => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: REACT_RENDER_OP,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n    // We only want this to run once.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n\n/** Grabs active transaction off scope */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  if (hub) {\n    const scope = hub.getScope();\n    if (scope) {\n      return scope.getTransaction() as T | undefined;\n    }\n  }\n\n  return undefined;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}